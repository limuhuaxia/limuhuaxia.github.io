<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>limuのArknights</title>
  
  
  <link href="https://limuhuaxia.github.io/atom.xml" rel="self"/>
  
  <link href="https://limuhuaxia.github.io/"/>
  <updated>2022-02-09T12:23:19.334Z</updated>
  <id>https://limuhuaxia.github.io/</id>
  
  <author>
    <name>limu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Pyhton基础</title>
    <link href="https://limuhuaxia.github.io/2022/02/09/Python/"/>
    <id>https://limuhuaxia.github.io/2022/02/09/Python/</id>
    <published>2022-02-09T12:00:00.000Z</published>
    <updated>2022-02-09T12:23:19.334Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Python是一种解释型语言，主要包括解释器和函数库。</p><h3 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h3><p>Help    帮助</p><p>Function    函数</p><p>Built-in（builtins）    内置</p><p>Module 模块</p><p>Value    值</p><p>Stream    流</p><p>Default    默认的</p><h2 id="数据分类"><a href="#数据分类" class="headerlink" title="数据分类"></a>数据分类</h2><h4 id="列表-list"><a href="#列表-list" class="headerlink" title="列表    list"></a>列表    list</h4><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li><p>用来表示一系列数据，数据类型可以不同（任意类型），列表内的数据可改变。用中括号定义：list=[]。</p></li><li><p>每个数据间用逗号（英文）分隔开，其中任意一组数据都被称为元素。</p></li><li><p>列表中存储的数据可以通过下标的方式进行获取。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  0   1   2   3   4</span><br><span class="line">[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;e&#x27;]</span><br><span class="line"> -5  -4  -3  -2  -1</span><br></pre></td></tr></table></figure><ul><li>列表支持套娃，即可以在列表中存储一个列表，称为二级列表（二维）或多维列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;a&#x27;</span>,[<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>],<span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>[<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">结果：[<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>]</span><br><span class="line"> <span class="number">33</span></span><br></pre></td></tr></table></figure><h4 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组    tuple"></a>元组    tuple</h4><h6 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h6><ul><li><p>在定义多个数据内容时，可以选择list列表类型，也可以使用tuple元组定义</p></li><li><p>元组和列表都可以存储多个数据（数据类型可以不同）</p></li><li><p>元组用小括号来定义：tuple=()</p></li><li><p>注意，在元组中如果只有一个元素，要在第一个元素后加逗号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tuple</span> = (<span class="number">1</span>,)</span><br></pre></td></tr></table></figure></li></ul><h6 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h6><ul><li><p>列表用[],元组用()</p></li><li><p><strong>元组内的元素不可更改也不能删除，但可以删除整个元组（列表可以）</strong></p></li></ul><h4 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典    dict"></a>字典    dict</h4><ul><li>字典也是存储一组或多组数据时使用的，使用大括号分隔：dict={}</li><li>字典是键值对的存储方式 name：admin</li><li>键与值必须用冒号分隔，多组键值之间用逗号分隔</li><li>键名不能重复，值可以重复</li><li>键名必须用字符串或者数字，值可以是任意类型</li></ul><h6 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h6><blockquote><p>获取字典中的值</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vard = &#123;<span class="string">&#x27;title&#x27;</span>:<span class="string">&#x27;&lt;&lt;鬼谷子&gt;&gt;&#x27;</span>,<span class="string">&#x27;author&#x27;</span>:<span class="string">&#x27;鬼谷子&#x27;</span>,<span class="string">&#x27;price&#x27;</span>:<span class="string">&#x27;99.99&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(vard[<span class="string">&#x27;author&#x27;</span>])</span><br><span class="line"><span class="comment">#结果：鬼谷子</span></span><br></pre></td></tr></table></figure><blockquote><p>键名重复的后果（后面覆盖前面）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vard = &#123;<span class="string">&#x27;title&#x27;</span>:<span class="string">&#x27;鬼谷子&#x27;</span>,<span class="string">&#x27;author&#x27;</span>:<span class="string">&#x27;鬼谷子&#x27;</span>,<span class="string">&#x27;price&#x27;</span>:<span class="string">&#x27;99.99&#x27;</span>,<span class="string">&#x27;price&#x27;</span>:<span class="string">&#x27;29.99&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(vard[<span class="string">&#x27;price&#x27;</span>])</span><br><span class="line"><span class="comment">#结果：29.99</span></span><br></pre></td></tr></table></figure><h4 id="集合-set"><a href="#集合-set" class="headerlink" title="集合    set"></a>集合    set</h4><ul><li><p>set集合是一个<strong>无序且不重复的</strong>集合的数据类型(会自动去掉重复的元素)</p></li><li><p>set集合用大括号或花括号定义：set = {}或vart=set()</p></li><li><p>定义空集合时必须用set()方法，因为花括号会和字典冲突</p></li><li><p>无法获取结合中的单个元素，但是可以添加和删除</p></li><li><p>集合主要用于运算，交集，差集，并集，对称集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line">b = &#123;<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(a &amp; b)</span><br><span class="line"><span class="built_in">print</span>(a - b)</span><br><span class="line"><span class="built_in">print</span>(a | b)</span><br><span class="line"><span class="built_in">print</span>(a ^ b)</span><br><span class="line"><span class="comment">#&#123;&#x27;b&#x27;, 1, &#x27;a&#x27;, &#x27;c&#x27;&#125;</span></span><br><span class="line"><span class="comment">#&#123;2, 3&#125;</span></span><br><span class="line"><span class="comment">#&#123;1, 2, 3, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;a&#x27;&#125;</span></span><br><span class="line"><span class="comment">#&#123;2, 3&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="set-add"><a href="#set-add" class="headerlink" title="set.add"></a>set.add</h5><h6 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h6><p>add() 方法用于给集合添加元素，如果添加的元素在集合中已存在，则不执行任何操作。</p><h6 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h6><p>add()方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set.add(elmnt)</span><br></pre></td></tr></table></figure><h6 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h6><ul><li>elmnt – 必需，要添加的元素。</li></ul><h6 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h6><p>无。</p><h6 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fruits = &#123;<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>&#125;</span><br><span class="line">fruits.add(<span class="string">&quot;orange&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(fruits)</span><br><span class="line"><span class="comment">#&#123;&#x27;apple&#x27;, &#x27;banana&#x27;, &#x27;orange&#x27;, &#x27;cherry&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h5 id="set-discard"><a href="#set-discard" class="headerlink" title="set.discard"></a>set.discard</h5><h6 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h6><p>discard() 方法用于移除指定的集合元素。</p><p>该方法不同于 <code>remove()</code> 方法，因为 <code>remove()</code> 方法在移除一个不存在的元素时会发生错误，而 <code>discard()</code> 方法不会。</p><h6 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h6><p>discard() 方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set.discard(value)</span><br></pre></td></tr></table></figure><h6 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h6><ul><li>value – 必需，要移除的元素</li></ul><h6 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h6><p>无。</p><h6 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fruits = &#123;<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>&#125;</span><br><span class="line">fruits.discard(<span class="string">&quot;banana&quot;</span>) </span><br><span class="line"><span class="built_in">print</span>(fruits)</span><br><span class="line"><span class="comment">#&#123;&#x27;cherry&#x27;, &#x27;apple&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h6 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h6><ul><li>可变数据类型：列表，字典，集合</li><li>不可变数据类型：字符串，数字，元组</li><li>容器数据类型：字符串，列表，元组，集合，字典</li><li>非容器数据类型：数字，布尔类型</li></ul><h4 id="基础数据类型转换"><a href="#基础数据类型转换" class="headerlink" title="基础数据类型转换"></a>基础数据类型转换</h4><p>什么是数据类型转换？</p><p>​    把一个数据类型转换为另一个数据类型，例如 字符串转为数字（Ascii）</p><p>为什么要数据转换？</p><p>​    因为不用数据类型之间不能运算</p><p>数据转换的形式？</p><h6 id="自动类型转换（向高精度转换）"><a href="#自动类型转换（向高精度转换）" class="headerlink" title="自动类型转换（向高精度转换）"></a>自动类型转换（向高精度转换）</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = 123</span><br><span class="line">b = True</span><br><span class="line">print(a+b)#bool为true时等于1，false则为0</span><br><span class="line">#124</span><br></pre></td></tr></table></figure><h6 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h6><ul><li>str(字符串)</li><li>int(整型)</li><li>float(浮点型)</li><li>bool(布尔型)</li><li>list(列表)</li><li>tuple(元组)</li><li>dict(字典)</li><li>set(集合)</li></ul><blockquote><p>注意在转换时要看清格式，部分数据类型不一定能转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = &#x27;v&#x27;</span><br><span class="line">b= int(a)</span><br><span class="line">print(b)</span><br><span class="line">#ValueError: invalid literal for int() with base 10: &#x27;v&#x27;</span><br></pre></td></tr></table></figure></blockquote><h4 id="容器数据类型转换"><a href="#容器数据类型转换" class="headerlink" title="容器数据类型转换"></a>容器数据类型转换</h4><ul><li>list(列表)</li><li>tuple(元组)</li><li>dict(字典)</li><li>set(集合)</li></ul><h3 id="二进制与位运算"><a href="#二进制与位运算" class="headerlink" title="二进制与位运算"></a>二进制与位运算</h3><h6 id="十进制转二进制"><a href="#十进制转二进制" class="headerlink" title="十进制转二进制"></a>十进制转二进制</h6><ul><li><p>除2取余，逆序排列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = 127</span><br><span class="line">b = &quot; &quot;</span><br><span class="line">while a&gt;2:</span><br><span class="line">    c = a % 2</span><br><span class="line">    b += str(c)</span><br><span class="line">    a = a // 2</span><br><span class="line">b += str(a)</span><br><span class="line">print(b)</span><br><span class="line">#1111111</span><br></pre></td></tr></table></figure></li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><table><thead><tr><th align="center">位运算符</th><th align="center">说明</th><th align="center">使用形式</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">&amp;&amp;</td><td align="center">按位与按位与</td><td align="center">a &amp; ba &amp; b</td><td align="center">4 &amp; 5，真为1，假为0</td></tr><tr><td align="center">||</td><td align="center">按位或按位或描述</td><td align="center">a | ba | b实例</td><td align="center">4 | 5，有一个为真则为真，否则为假</td></tr><tr><td align="center">^^</td><td align="center">按位异或按位异或</td><td align="center">a ^ ba ^ b</td><td align="center">4 ^ 5，相同为0，不同为1</td></tr><tr><td align="center">~</td><td align="center">按位取反</td><td align="center">~a</td><td align="center"><del>4，取反，</del>4为0，~-3为1</td></tr><tr><td align="center">&lt;&lt;</td><td align="center">按位左移</td><td align="center">a &lt;&lt; b</td><td align="center">4 &lt;&lt; 2，表示整数 4 按位左移 2 位</td></tr><tr><td align="center">&gt;&gt;</td><td align="center">按位右移</td><td align="center">a &gt;&gt; b</td><td align="center">4 &gt;&gt; 2，表示整数 4 按位右移 2</td></tr></tbody></table><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><h6 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h6><blockquote><p>越小越优</p></blockquote><table><thead><tr><th align="center">优先级</th><th align="center">运算符</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center"><code>lambda</code></td><td align="center">Lambda表达式</td></tr><tr><td align="center">2</td><td align="center"><code>or</code></td><td align="center">布尔“或”</td></tr><tr><td align="center">3</td><td align="center"><code>and</code></td><td align="center">布尔“与”</td></tr><tr><td align="center">4</td><td align="center"><code>not x</code></td><td align="center">布尔“非”</td></tr><tr><td align="center">5</td><td align="center"><code>in，not in</code></td><td align="center">成员测试</td></tr><tr><td align="center">6</td><td align="center"><code>is，is not</code></td><td align="center">同一性测试</td></tr><tr><td align="center">7</td><td align="center"><code>&lt;，&lt;=，&gt;，&gt;=，!=，==</code></td><td align="center">比较</td></tr><tr><td align="center">8</td><td align="center">`</td><td align="center">`</td></tr><tr><td align="center">9</td><td align="center"><code>^</code></td><td align="center">按位异或</td></tr><tr><td align="center">10</td><td align="center"><code>&amp;</code></td><td align="center">按位与</td></tr><tr><td align="center">11</td><td align="center"><code>&lt;&lt;，&gt;&gt;</code></td><td align="center">移位</td></tr><tr><td align="center">12</td><td align="center"><code>+，-</code></td><td align="center">加法与减法</td></tr><tr><td align="center">13</td><td align="center"><code>*，/，%</code></td><td align="center">乘法、除法与取余</td></tr><tr><td align="center">14</td><td align="center"><code>+x，-x</code></td><td align="center">正负号</td></tr><tr><td align="center">15</td><td align="center"><code>~x</code></td><td align="center">按位翻转</td></tr><tr><td align="center">16</td><td align="center"><code>**</code></td><td align="center">指数</td></tr><tr><td align="center">17</td><td align="center"><code>x.attribute</code></td><td align="center">属性参考</td></tr><tr><td align="center">18</td><td align="center"><code>x[index]</code></td><td align="center">下标</td></tr><tr><td align="center">19</td><td align="center"><code>x[index:index]</code></td><td align="center">寻址段</td></tr><tr><td align="center">20</td><td align="center"><code>f(arguments...)</code></td><td align="center">函数调用</td></tr><tr><td align="center">21</td><td align="center"><code>(experession,...)</code></td><td align="center">绑定或元组显示</td></tr><tr><td align="center">22</td><td align="center"><code>[expression,...]</code></td><td align="center">列表显示</td></tr><tr><td align="center">23</td><td align="center"><code>&#123;key:datum,...&#125;</code></td><td align="center">字典显示</td></tr><tr><td align="center">24</td><td align="center"><code>&#39;expression,...&#39;</code></td><td align="center">字符串转换</td></tr></tbody></table><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><table><thead><tr><th align="center">转义字符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">\n</td><td align="center">换行符，将光标位置移到下一行开头。</td></tr><tr><td align="center">\r</td><td align="center">回车符，将光标位置移到本行开头。</td></tr><tr><td align="center">\t</td><td align="center">水平制表符，也即 Tab 键，一般相当于四个空格。</td></tr><tr><td align="center">\a</td><td align="center">蜂鸣器响铃。注意不是喇叭发声，现在的计算机很多都不带蜂鸣器了，所以响铃不一定有效。</td></tr><tr><td align="center">\b</td><td align="center">退格（Backspace），将光标位置移到前一列。</td></tr><tr><td align="center">\</td><td align="center">反斜线</td></tr><tr><td align="center">&#39;</td><td align="center">单引号</td></tr><tr><td align="center">&quot;</td><td align="center">双引号</td></tr><tr><td align="center">\</td><td align="center">在字符串行尾的续行符，即一行未完，转到下一行继续写。</td></tr></tbody></table><h3 id="模块化编程"><a href="#模块化编程" class="headerlink" title="模块化编程"></a>模块化编程</h3><blockquote><p>模块化编程指把程序进行封装（函数封装，面向对象，文件。。。）</p></blockquote><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><h5 id="什么是函数"><a href="#什么是函数" class="headerlink" title="什么是函数?"></a>什么是函数?</h5><blockquote><p>function-&gt;函数，功能</p><p>函数就是一个具有特定功能的代码块</p></blockquote><h5 id="函数的作用"><a href="#函数的作用" class="headerlink" title="函数的作用?"></a>函数的作用?</h5><blockquote><p>函数就是把代码进行封禁，以提高代码的重要性，提高开发效率，降低后期运维成本</p></blockquote><h5 id="函数的定义和使用-？"><a href="#函数的定义和使用-？" class="headerlink" title="函数的定义和使用 ？"></a>函数的定义和使用 ？</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#定义函数【基本结构】</span><br><span class="line">def 函数名([参数列表]):</span><br><span class="line">当前函数的具体功能的代码</span><br><span class="line">返回值（可以省略）</span><br><span class="line">---------------------</span><br><span class="line">#函数封装完并不会执行，只是对函数定义</span><br><span class="line">#如果要使用函数，那么要在其他地方调用它（调用必须从主函数开始，因为程序默认只执行主函数）</span><br><span class="line"></span><br><span class="line">def love():</span><br><span class="line">    print(&quot;hello python&quot;)</span><br><span class="line">love()</span><br><span class="line">#hello python</span><br></pre></td></tr></table></figure><h5 id="函数的特征和注意"><a href="#函数的特征和注意" class="headerlink" title="函数的特征和注意"></a>函数的特征和注意</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#函数先定义再调用（python要求）</span><br><span class="line">#函数定义后，不调用不执行</span><br><span class="line">#函数的调用没有次数限制</span><br><span class="line">#函数名不要和方法和默认函数冲突，否则会覆盖</span><br><span class="line">#命名规范</span><br><span class="line">数字字母下划线，不能以数字开头</span><br><span class="line">严格区分大小写，不能使用关键字</span><br><span class="line">命名最好有意义，且不要使用中文</span><br></pre></td></tr></table></figure><h4 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h4><blockquote><p>函数在定义时，可以再函数列表的位置定义<strong>形参</strong></p><p>调用带有形参的函数时，需要传递参数（实参）</p><p>在调用函数时，按顺序传递实参，实参和形参的数量必须一致，过程就是变量的赋值操作</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">love</span>(<span class="params">w</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;i love &quot;</span>+w)</span><br><span class="line">a = <span class="string">&quot;python&quot;</span></span><br><span class="line">love(a)</span><br><span class="line"><span class="comment">#i love python</span></span><br></pre></td></tr></table></figure><h4 id="函数的参数类型"><a href="#函数的参数类型" class="headerlink" title="函数的参数类型"></a>函数的参数类型</h4><ul><li>普通参数，默认参数，收集参数，命名关键字参数，关键字参数收集</li></ul><h5 id="普通参数"><a href="#普通参数" class="headerlink" title="普通参数"></a>普通参数</h5><blockquote><p>也就是位置参数，顺序参数，也是必须传递的参数</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def love(w,y):</span><br><span class="line">    print(&quot;i love &quot;+w+y)</span><br><span class="line">a = &quot;python&quot;</span><br><span class="line">b = &quot;&quot;</span><br><span class="line">love(a,b)</span><br><span class="line">#i love python</span><br></pre></td></tr></table></figure><h5 id="默认函数"><a href="#默认函数" class="headerlink" title="默认函数"></a>默认函数</h5><blockquote><p>指在定义形参时默认设置好的参数（变量）</p><p>调用时如果没有传递默认参数，那么就会使用默认值</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def love(w,y,z=&quot; me&quot;):</span><br><span class="line">    print(&quot;i love &quot;+w+y+z)</span><br><span class="line">a = &quot;python&quot;</span><br><span class="line">b = &quot;&quot;</span><br><span class="line">love(a,b)</span><br><span class="line">#i love python me</span><br></pre></td></tr></table></figure><h5 id="收集参数"><a href="#收集参数" class="headerlink" title="收集参数"></a>收集参数</h5><blockquote><p>定义一个形参，专门收集多余的实参，或者理解为，不确定需要传递多少个实参，直接用一个形参接收</p><p>定义方式为形参前加*号，例：*args[]</p><p>多余的参数会存储再args中，类型为元组，即不可改变（元组特性）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def love(w,*z):</span><br><span class="line">    if w == 50:</span><br><span class="line">        print(z)</span><br><span class="line">love(50,100,200,300)</span><br><span class="line">#(100, 200, 300)</span><br></pre></td></tr></table></figure><h5 id="命名关键字参数"><a href="#命名关键字参数" class="headerlink" title="命名关键字参数"></a>命名关键字参数</h5><blockquote><p>定义在收集参数后面</p><p>关键字参数必须通过形参的名字来进行传递</p><p>普通函数也可以通过关键字赋值进行参数传递，这样不要求顺序了</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def love(w,*z,m):</span><br><span class="line">    if w == 50:</span><br><span class="line">        print(z)</span><br><span class="line">    print(m)</span><br><span class="line">love(50,100,200,m=&quot;hello world&quot;)</span><br><span class="line">#(100, 200)</span><br><span class="line">#hello world</span><br></pre></td></tr></table></figure><h5 id="关键字参数收集"><a href="#关键字参数收集" class="headerlink" title="关键字参数收集"></a>关键字参数收集</h5><blockquote><p>将多余的关键字收集成字典，类似收集参数</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def love(w,*z,**kwargs):</span><br><span class="line">    if w == 50:</span><br><span class="line">        print(z)</span><br><span class="line">    print(kwargs)</span><br><span class="line"></span><br><span class="line">love(50,100,200,m=&quot;hello world&quot;,n=&quot;cctv009&quot;)</span><br><span class="line">#(100, 200)</span><br><span class="line">#&#123;&#x27;m&#x27;: &#x27;hello world&#x27;, &#x27;n&#x27;: &#x27;cctv009&#x27;&#125;</span><br></pre></td></tr></table></figure><h5 id="注意形参声明的位置"><a href="#注意形参声明的位置" class="headerlink" title="注意形参声明的位置"></a>注意形参声明的位置</h5><p>普通参数—&gt;默认参数—&gt;收集参数—&gt;关键字参数—&gt;关键字收集参数</p><blockquote><p>要遵循这个规则，否则会报错，不过极少出现多种参数一起使用的情况</p></blockquote><h4 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h4><blockquote><p>函数中使用return关键字来返回任意数据或内容，返回位置为调用处</p><p>在一个函数中，可以返回一些内容，也可以不返回</p><p>若需要返回，又不能直接返回（递归），可以先用默认值（foalt(“INF”),即最大值）占位</p><p>return之后的代码不再执行，即return代表函数的结束</p></blockquote><h6 id="函数的分类"><a href="#函数的分类" class="headerlink" title="函数的分类"></a>函数的分类</h6><ol><li>执行过程函数：只执行不返回</li><li>具有返回值的函数：执行后返回值</li></ol><h4 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h4><blockquote><p>作用域就是可以起到作用的范围区域（谁可以用，谁不能用）</p><p>表现为变量的有效范围</p></blockquote><h5 id="变量分类"><a href="#变量分类" class="headerlink" title="变量分类"></a>变量分类</h5><h6 id="可变数据类型"><a href="#可变数据类型" class="headerlink" title="可变数据类型"></a>可变数据类型</h6><blockquote><p>在函数外定义，函数内可以使用并改变，表现为<strong>列表、字典</strong>(#`O′)</p></blockquote><h6 id="不可变数据类型"><a href="#不可变数据类型" class="headerlink" title="不可变数据类型"></a>不可变数据类型</h6><blockquote><p>在函数外定义的变量，在函数内只能访问，不能使用进行其他操作，例如<strong>元组、集合</strong></p></blockquote><h5 id="全局和局部"><a href="#全局和局部" class="headerlink" title="全局和局部"></a>全局和局部</h5><h6 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h6><blockquote><p>在函数内外都可以使用的变量</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#在函数内使用global关键字定义的变量就是全局变量</span><br><span class="line">#全局变量就是函数内外都能使用</span><br></pre></td></tr></table></figure><h5 id="global关键字"><a href="#global关键字" class="headerlink" title="global关键字"></a>global关键字</h5><h6 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h6><p>在函数内使用，可以访问和改变全局变量</p><h6 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h6><p>global 关键字语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">global x</span><br></pre></td></tr></table></figure><h6 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># globals 函数返回一个全局变量的字典，包括所有导入的变量。</span><br><span class="line">num = 10</span><br><span class="line">def func():</span><br><span class="line">    love = 20</span><br><span class="line">    global num</span><br><span class="line">    num += love</span><br><span class="line">    print(num)</span><br><span class="line">func()</span><br><span class="line">#30</span><br></pre></td></tr></table></figure><h6 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h6><blockquote><p>在函数内才能使用的变量</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num = 10</span><br><span class="line">def func():</span><br><span class="line">print(num) #在函数外定义的变量可以访问但不能更改</span><br><span class="line">func()</span><br><span class="line">#10</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">num = 10</span><br><span class="line">def func():</span><br><span class="line">num += 10 #在函数内定义的变量函数外不能使用</span><br><span class="line">print(num)</span><br><span class="line">func()</span><br><span class="line">#TabError: inconsistent use of tabs and spaces in indentation</span><br></pre></td></tr></table></figure><h5 id="globals与locals函数"><a href="#globals与locals函数" class="headerlink" title="globals与locals函数"></a>globals与locals函数</h5><p>globals：获取全局变量数据（告诉你谁是全局变量）</p><p>locals：获取当前变量数据（局部标量）</p><h6 id="信息解读"><a href="#信息解读" class="headerlink" title="信息解读"></a>信息解读</h6><p>{</p><p>‘_<em>name_</em>‘: ‘_<em>main_</em>‘</p><p>_<em>doc_</em>‘: 文档说明</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在函数的第一行使用&#x27;&#x27;&#x27; &#x27;&#x27;&#x27;符，就是__doc__的意思</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    这里是让你明白__doc__的作用</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    num = <span class="number">10</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        <span class="keyword">nonlocal</span> num</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(num)</span><br><span class="line">    inner()</span><br><span class="line">outer()</span><br><span class="line"><span class="built_in">print</span>(outer.__doc__)</span><br><span class="line"><span class="comment">#11</span></span><br><span class="line"></span><br><span class="line">   <span class="comment"># 这里是让你明白__doc__的作用</span></span><br><span class="line">   <span class="comment"># :return:</span></span><br></pre></td></tr></table></figure><p>‘_<em>package_</em>‘: 包</p><p> ‘_<em>loader_</em>‘: 加载程序</p><p>‘_<em>spec_</em>‘: 规范</p><p>‘_<em>annotations_</em>‘: {注释},</p><p> ‘_<em>builtins_</em>‘: &lt;内置命令&gt;, </p><p>‘_<em>file_</em>‘: 文件路径</p><p>‘__cached__&#39;:缓存</p><p>‘outer’: &lt;函数位置&gt;</p><h5 id="函数的作用域"><a href="#函数的作用域" class="headerlink" title="函数的作用域"></a>函数的作用域</h5><blockquote><p>变量和函数都有作用域</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def outer():</span><br><span class="line">    print(&quot;hello&quot;)</span><br><span class="line">    #在函数内定义的函数不能直接被调用</span><br><span class="line">    def inner():</span><br><span class="line">        print(&quot;world&quot;)</span><br><span class="line">outer()</span><br><span class="line">#也就是不能再这里直接inner()</span><br><span class="line">#hello</span><br></pre></td></tr></table></figure><h5 id="nonlocal关键字"><a href="#nonlocal关键字" class="headerlink" title="nonlocal关键字"></a>nonlocal关键字</h5><p>解决问题：怎么在内函数中调用外函数的局部变量</p><blockquote><p>使用global会报错，因为num不是全局变量，而是局部变量</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def outer():</span><br><span class="line">    num = 10</span><br><span class="line">    def inner():</span><br><span class="line">        global num</span><br><span class="line">        num += 1</span><br><span class="line">        print(num)</span><br><span class="line">    inner()</span><br><span class="line">outer()</span><br><span class="line">#NameError: name &#x27;num&#x27; is not defined：这是局部变量</span><br></pre></td></tr></table></figure><blockquote><p>使用nonlocal关键字</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def outer():</span><br><span class="line">    num = 10</span><br><span class="line">    def inner():</span><br><span class="line">        nonlocal num</span><br><span class="line">        num += 1</span><br><span class="line">        print(num)</span><br><span class="line">    inner()</span><br><span class="line">outer() #ps:使用nonlocal关键字时上一层必须存在该变量，不能提升为全局变量</span><br><span class="line">#11 #可以了，问题解决啦</span><br></pre></td></tr></table></figure><h5 id="函数练习题"><a href="#函数练习题" class="headerlink" title="函数练习题"></a>函数练习题</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#九九乘法表</span></span><br><span class="line"><span class="comment">#def jiujiu(n=0):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    功能：打印九九乘法表</span></span><br><span class="line"><span class="string">    n = 0(默认)：正向输出</span></span><br><span class="line"><span class="string">    n = 1：反向输出</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#   if n ==0:</span></span><br><span class="line"><span class="comment">#       rg = range(1,10)</span></span><br><span class="line"><span class="comment">#   else:</span></span><br><span class="line"><span class="comment">#       rg = range(9,0,-1)#</span></span><br><span class="line"><span class="comment">#   for x in rg:</span></span><br><span class="line"><span class="comment">#       for y in range(1,x+1):</span></span><br><span class="line"><span class="comment">#           print(f&#x27;&#123;x&#125;x&#123;y&#125;=&#123;x*y&#125;&#x27;,end=&quot; &quot;)</span></span><br><span class="line"><span class="comment">#       print()</span></span><br><span class="line"><span class="comment">#jiujiu(1)</span></span><br></pre></td></tr></table></figure><h3 id="补充函数"><a href="#补充函数" class="headerlink" title="补充函数"></a>补充函数</h3><h5 id="range"><a href="#range" class="headerlink" title="range"></a>range</h5><h6 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h6><p>start: 计数从 start 开始。默认是从 0 开始<br>stop: 计数到 stop 结束，但不包括 stop<br>step：步长，默认为1</p><blockquote><p>下面直接叙述步长为正与为负的情况 </p></blockquote><h6 id="1-步长为正"><a href="#1-步长为正" class="headerlink" title="1.步长为正"></a>1.步长为正</h6><p>for i in range(1, 5, 1):<br>    print(i)<br>返回结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">左闭右开：[1,5)</span><br></pre></td></tr></table></figure><h6 id="2-步长为负"><a href="#2-步长为负" class="headerlink" title="2.步长为负"></a>2.步长为负</h6><blockquote><p><strong>步长为负时，必须start&gt;stop</strong></p></blockquote><p>for i in range(5, 1, -1):<br>    print(i)<br>返回结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">左开右闭: (1,5]</span><br></pre></td></tr></table></figure><h6 id="左闭右开及左开右闭"><a href="#左闭右开及左开右闭" class="headerlink" title="左闭右开及左开右闭"></a>左闭右开及左开右闭</h6><p>左开右闭</p><blockquote><p>是指区间包括左边的内容，但是不涵盖右边的内容。</p></blockquote><p>左闭右开</p><blockquote><p>是指区间不包括左边的内容，但是涵盖右边的内容。</p></blockquote><p>例如（2，3]是指大于2但是小于等于3的实数合集，又比如区间(10, 20)表示所有在10和20之间的实数，但不包括10或20。另一方面，[10, 20]表示所有在10和20之间的实数，以及10和20。</p><h3 id="列表进阶"><a href="#列表进阶" class="headerlink" title="列表进阶"></a>列表进阶</h3><blockquote><p>初始列表+双列表+判断</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">li1=[</span><br><span class="line">    [1,2,3],</span><br><span class="line">    [4,5,6],</span><br><span class="line">    [7,8,9]</span><br><span class="line">]</span><br><span class="line">list=[item2 for item1 in li1 for item2 in item1 if item2 % 2 == 0]</span><br><span class="line"></span><br><span class="line">print(list)</span><br><span class="line">#[2, 4, 6, 8]</span><br></pre></td></tr></table></figure><blockquote><p>实例演练</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">给定一个正整数,编写程序计算有多少对质数的和等于输入的这个正整数，并输出结果。输</span><br><span class="line">入值小于1000。</span><br><span class="line">如，输入为10,程序应该输出结果为2。(共 有两对质数的和为1日,分别为(5,5),(3,7))</span><br><span class="line"># [2,3,5,7]</span><br><span class="line">-输入描述:</span><br><span class="line">输入包括一个整数n,(3 ≤n &lt; 1000)</span><br><span class="line">输出描述:10</span><br><span class="line">输出对数:2</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">n = int(input())</span><br><span class="line">def zhishu(x):</span><br><span class="line">    for i in range(2,x):</span><br><span class="line">        df = x % i</span><br><span class="line">        if df == 0:</span><br><span class="line">            return False</span><br><span class="line">    else:</span><br><span class="line">        return True</span><br><span class="line">list1 = [i for i in range(2,n+1) if zhishu(i)]</span><br><span class="line">z = 0</span><br><span class="line">for item in list1:</span><br><span class="line">    if n - item in list1 and item &lt;= n-item:</span><br><span class="line">        z += 1</span><br><span class="line">print(z)</span><br></pre></td></tr></table></figure><h4 id="函数递归"><a href="#函数递归" class="headerlink" title="函数递归"></a>函数递归</h4><blockquote><p>递归函数就是定义了一个函数，然后再函数内，自己调用了自己这个函数</p><p>递归必须有结束，不然就会栈溢出，也可以理解为死循环</p><p>递归函数是一层层的进入，染后一层层的返回</p><p>递归中的值在被调用的时候会根据条件改变，但实际是不变的</p><p>递归函数的效率并不高，能不用就不用（使用for循环代替）</p><p>因为递归函数运行时会不断开闭栈空间，直到运算结束才会释放空间</p></blockquote><h6 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h6><p>斐波那契数列</p><p>1，1，2，3，5，8，13。。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#list[0]*1000:即初始化1000个为0的单链表</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">list</span> = [<span class="number">0</span>]*(n+<span class="number">1</span>)</span><br><span class="line"><span class="built_in">list</span>[<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line"><span class="built_in">list</span>[<span class="number">1</span>]=<span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">feibo</span>(<span class="params">n,v=<span class="number">2</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">list</span>[v] = <span class="built_in">list</span>[v - <span class="number">1</span>] + <span class="built_in">list</span>[v - <span class="number">2</span>]</span><br><span class="line">        feibo(n - <span class="number">1</span>, v + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>[n-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(feibo(n))</span><br><span class="line"><span class="comment">#老师写的。。。</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">feibo</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">3</span>: <span class="comment">#1,2位为1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> feibo(n-<span class="number">1</span>)+feibo(n-<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(feibo(n))</span><br><span class="line"><span class="comment">#递归函数是从高层一层层向下去计算的，值是以if返回的1从底层一层层返回的</span></span><br></pre></td></tr></table></figure><p>实现阶乘</p><p>1*2*3*4*5*6*7</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jiecheng</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n*jiecheng(n-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(jiecheng(n))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    7*jiecheng(6)</span></span><br><span class="line"><span class="string">        6*jiecheng(5)</span></span><br><span class="line"><span class="string">            5*jiecheng(4)</span></span><br><span class="line"><span class="string">                4*jiecheng(3)</span></span><br><span class="line"><span class="string">                    3*jiecheng(2)</span></span><br><span class="line"><span class="string">                        2*jiecheng(1)</span></span><br><span class="line"><span class="string">                            jiecheng(1) ==&gt; 1</span></span><br><span class="line"><span class="string">                        2*1 ==&gt; 2</span></span><br><span class="line"><span class="string">                    3*2 ==&gt; 6</span></span><br><span class="line"><span class="string">                4*6 ==&gt; 24</span></span><br><span class="line"><span class="string">            5*24 ==&gt; 120</span></span><br><span class="line"><span class="string">        6*120 ==&gt; 720</span></span><br><span class="line"><span class="string">    7*720 ==&gt; 5040</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="高阶函数（自定义）"><a href="#高阶函数（自定义）" class="headerlink" title="高阶函数（自定义）"></a>高阶函数（自定义）</h3><h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><blockquote><p>把函数作为一个参数传递给另一个函数，就叫回调函数，也叫函数嵌套</p></blockquote><blockquote><p>如果函数中传递的参数是一个函数，并且在函数中使用了传递进来的函数，那么这个函数就称为一个回调函数</p></blockquote><h6 id="实列演示"><a href="#实列演示" class="headerlink" title="实列演示"></a>实列演示</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def func(f):</span><br><span class="line">    f() #f已称为函数</span><br><span class="line">def love():</span><br><span class="line">    print(123)</span><br><span class="line">func(love)</span><br><span class="line">#123</span><br><span class="line">#个人感觉回调函数就是函数嵌套，作用就像多个for循环，学会蛮有用的</span><br></pre></td></tr></table></figure><h4 id="闭包函数"><a href="#闭包函数" class="headerlink" title="闭包函数"></a>闭包函数</h4><blockquote><p>它跟回调函数有点像，它是返回一个函数作为它的返回值</p><p>在一个函数内返回一个内函数，并且这个内函数还使用了外函数中的局部变量，者就是闭包函数</p></blockquote><h6 id="实列演示-1"><a href="#实列演示-1" class="headerlink" title="实列演示"></a>实列演示</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 闭包函数</span><br><span class="line">def func():</span><br><span class="line">    money = 0</span><br><span class="line">    def work():#在外函数中定义内函数</span><br><span class="line">        nonlocal money</span><br><span class="line">        money += 100</span><br><span class="line">    def overtime():</span><br><span class="line">        nonlocal  money</span><br><span class="line">        money += 200</span><br><span class="line">    def buy():</span><br><span class="line">        nonlocal  money</span><br><span class="line">        money -= 50</span><br><span class="line">    return work() #调用了work函数，实现情况可以加判断条件</span><br><span class="line">func()</span><br><span class="line">func()</span><br><span class="line">func()</span><br><span class="line">#100</span><br><span class="line">100</span><br><span class="line">100</span><br></pre></td></tr></table></figure><h6 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h6><ol><li>在外部函数调用变量，并且在内部函数中使用了这个局部变量</li><li>在外函数中 符号了内函数，返回的内函数就是闭包函数</li><li>主要在于保护了外函数中的局部变量，即可以被使用，又不会被破坏</li></ol><h6 id="检测闭包函数"><a href="#检测闭包函数" class="headerlink" title="检测闭包函数"></a>检测闭包函数</h6><ul><li>函数：__closure__</li><li>作用：检测是否为闭包函数</li><li>输出：None（不是），cell（是）</li></ul><h4 id="匿名函数（lambda）"><a href="#匿名函数（lambda）" class="headerlink" title="匿名函数（lambda）"></a>匿名函数（lambda）</h4><blockquote><p>匿名函数就是可以不用定义，并且函数也不存在名字</p></blockquote><blockquote><p>在python可以使用lambda表达式定义匿名函数</p></blockquote><blockquote><p>注意lambda仅仅只是一个表达式，不是一个代码块，所以又叫一行代码的函数</p></blockquote><blockquote><p>lambda表达式也有形参，并且不能访问除自己形参外的任何数据</p></blockquote><h6 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lambda [参数]:expression</span><br></pre></td></tr></table></figure><blockquote><p>冒号前是参数，可以有多个，用逗号隔开，冒号右边的为表达式（只能为一个）。其实lambda返回值是一个函数的地址，也就是函数对象。</p></blockquote><h6 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="keyword">lambda</span> x,y:x+y</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(<span class="number">11</span>,<span class="number">22</span>))<span class="comment">#此时sum作为函数名使用</span></span><br><span class="line"><span class="comment">#33 #不能做过于复杂的操作</span></span><br><span class="line">res = <span class="keyword">lambda</span> sec:<span class="string">&quot;很man&quot;</span> <span class="keyword">if</span> sec==<span class="string">&#x27;男&#x27;</span> <span class="keyword">else</span> <span class="string">&quot;很nice&quot;</span></span><br><span class="line"><span class="built_in">print</span>(res(<span class="string">&#x27;女&#x27;</span>))</span><br><span class="line"><span class="comment">#很nice</span></span><br></pre></td></tr></table></figure><h6 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h6><blockquote><p>做一些简单的操作，又不想定义函数时用</p></blockquote><h4 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h4><blockquote><p>迭代器时python特色功能之一，是访问集合元素的一种方式</p><p>迭代器是一个可以记住访问遍历的位置的对象</p><p>迭代器只能从前往后一个一个遍历，不能后退</p><p>从集合的第一个元素开始访问，直到所有函数都被访问完</p></blockquote><h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><blockquote><p>能被next()函数调用，并不对返回下一个值的对象称为迭代器（inter）</p></blockquote><h5 id="iter"><a href="#iter" class="headerlink" title="iter()"></a>iter()</h5><h6 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h6><blockquote><p>把可迭代对象转为迭代器对象</p></blockquote><h6 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h6><blockquote><p>可迭代对象（str、list、tuple、dict、set、range。。。）</p></blockquote><h6 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h6><blockquote><p>迭代器对象</p></blockquote><h6 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">f4 = [&#x27;诸葛亮&#x27;,&#x27;司马懿&#x27;,&#x27;周瑜&#x27;,&#x27;元歌&#x27;]</span><br><span class="line">res = iter(f4)</span><br><span class="line">r=next(res)</span><br><span class="line">print(r)</span><br><span class="line">r=next(res)</span><br><span class="line">print(r)</span><br><span class="line">r=next(res)</span><br><span class="line">print(r)</span><br><span class="line">r=next(res)</span><br><span class="line">print(r)</span><br><span class="line">r=next(res)</span><br><span class="line">print(r)</span><br><span class="line">#诸葛亮</span><br><span class="line">司马懿</span><br><span class="line">周瑜</span><br><span class="line">元歌</span><br><span class="line">StopIteration#5次就超出可迭代范围了</span><br><span class="line">#迭代器取值的方案</span><br></pre></td></tr></table></figure><h5 id="next"><a href="#next" class="headerlink" title="next()"></a>next()</h5><h6 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h6><p>调用迭代器，返回迭代器中的数据</p><h6 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h6><p>可迭代对象，即iter()后的数据</p><h6 id="取值方案"><a href="#取值方案" class="headerlink" title="取值方案"></a>取值方案</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.使用next()函数调用迭代器对象（就是被iter()了的变量）</span><br><span class="line">print(next(res))</span><br><span class="line">print(next(res))</span><br><span class="line">2.使用list取值</span><br><span class="line">r = list(res)</span><br><span class="line">print(r)</span><br><span class="line">3.使用for循环</span><br><span class="line">for i in res:</span><br><span class="line">print(i)</span><br></pre></td></tr></table></figure><h6 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h6><ol><li>调用一次减少一次,直至取完值后报错</li><li>list一次就能取完</li><li>使用for循环</li></ol><h6 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type()#检测类型</span><br><span class="line">isinstance(参数,Iterator)#检测是否为打的对象</span><br></pre></td></tr></table></figure><h4 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h4><h5 id="range-1"><a href="#range-1" class="headerlink" title="range()"></a>range()</h5><h6 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">生成一个指定的数字序列数字序列，一般用于for循环</span><br></pre></td></tr></table></figure><h6 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">range(start, stop[, step])</span><br></pre></td></tr></table></figure><h6 id="参数-4"><a href="#参数-4" class="headerlink" title="参数"></a>参数</h6><ul><li>start: 计数从 start 开始。默认是从 0 开始。例如range（5）等价于range（0， 5）;</li><li>stop: 计数到 stop 结束，<strong>但不包括 stop</strong>。例如：range（0， 5） 是[0, 1, 2, 3, 4]没有5</li><li>step：步长，默认为1。例如：range（0， 5） 等价于 range(0, 5, 1)</li></ul><h6 id="返回值-3"><a href="#返回值-3" class="headerlink" title="返回值"></a>返回值</h6><ul><li>可迭代的对象，数字序列</li></ul><h6 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.print(list(range(5)))#转为列表数据</span><br><span class="line">#[0, 1, 2, 3, 4]</span><br><span class="line">2.for i in range(5):#通过for循环遍历</span><br><span class="line">    print(i,end=&quot; &quot;)</span><br><span class="line">#0 1 2 3 4 </span><br><span class="line">3.res = range(5)#转为迭代器，使用next函数调用</span><br><span class="line">res = iter(res)</span><br><span class="line">print(next(res))</span><br><span class="line">print(next(res))</span><br><span class="line">#0</span><br><span class="line">#1</span><br></pre></td></tr></table></figure><h6 id="什么是左闭右开"><a href="#什么是左闭右开" class="headerlink" title="什么是左闭右开"></a>什么是左闭右开</h6><ul><li><p>左闭右开是一种区间表示方式，例如在整数上[3,6)表示3，4，5三个数，闭代表取值取到那个数，开代表取值取不到那个数。</p></li><li><p>range函数：步长为正，左闭右开；步长为负，左开右闭。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(list(range(5,0,-1)))</span><br><span class="line">#[5, 4, 3, 2, 1]</span><br><span class="line">ps:这里补充一点，用负数时要注意start&gt;stop</span><br></pre></td></tr></table></figure><h5 id="zip"><a href="#zip" class="headerlink" title="zip()"></a>zip()</h5><h6 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表。</span><br><span class="line">#如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 * 号操作符，可以将元组解压为列表。</span><br><span class="line">总结：将元素以元组的方式打包成迭代器对象，以列表形式返回</span><br></pre></td></tr></table></figure><h6 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip([iterable, ...])</span><br></pre></td></tr></table></figure><h6 id="参数-5"><a href="#参数-5" class="headerlink" title="参数"></a>参数</h6><ul><li>iterabl – 一个或多个迭代器</li></ul><h6 id="返回值-4"><a href="#返回值-4" class="headerlink" title="返回值"></a>返回值</h6><ul><li>返回元组列表</li></ul><h6 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var1=&#x27;1234&#x27;</span><br><span class="line">var2=[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]</span><br><span class="line">var3=(&#x27;A&#x27;,&#x27;B&#x27;,&#x27;C&#x27;)</span><br><span class="line">res = zip(var1,var2,var3)</span><br><span class="line">pint(res) #返回迭代器对象</span><br><span class="line">print(list(res))</span><br><span class="line">#[(&#x27;1&#x27;, &#x27;a&#x27;, &#x27;A&#x27;), (&#x27;2&#x27;, &#x27;b&#x27;, &#x27;B&#x27;), (&#x27;3&#x27;, &#x27;c&#x27;, &#x27;C&#x27;)]</span><br><span class="line">#返回的最短的组合</span><br><span class="line">#看代码就知道了</span><br><span class="line">提取方法</span><br><span class="line">1.list()</span><br><span class="line">print(list(res))</span><br><span class="line">2.next()</span><br><span class="line">print(next(res))</span><br></pre></td></tr></table></figure><h6 id="扩展语法"><a href="#扩展语法" class="headerlink" title="扩展语法"></a>扩展语法</h6><blockquote><p>zip()与_*_号运算符结合可以用来拆解一个列表</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = [1,2,3]</span><br><span class="line">y = [4,5,6]</span><br><span class="line">zipped = zip(x,y)</span><br><span class="line">print(list(zipped))</span><br><span class="line">x2,y2 = zip(*zip(x,y))</span><br><span class="line">print(x2,y2)</span><br><span class="line">print(*zip(x,y)) #(1, 4), (2, 5), (3, 6)</span><br><span class="line">#[(1, 4), (2, 5), (3, 6)]</span><br><span class="line">(1, 2, 3) (4, 5, 6)</span><br></pre></td></tr></table></figure><h5 id="数据类型相关内置函数"><a href="#数据类型相关内置函数" class="headerlink" title="数据类型相关内置函数"></a>数据类型相关内置函数</h5><ul><li>int()    </li><li>float()</li><li>bool()</li><li>complex()</li><li>str()</li><li>list()</li><li>tuple()</li><li>dict()</li><li>set()</li></ul><h5 id="变量相关函数"><a href="#变量相关函数" class="headerlink" title="变量相关函数"></a>变量相关函数</h5><ul><li>id()    获取当前数据标识</li><li>type()     获取当前数据的类型</li><li>print()    打印输出    </li><li>input()    获取输入</li><li>isinstance()    检测是否为指定的数据类型</li></ul><h5 id="数学相关函数"><a href="#数学相关函数" class="headerlink" title="数学相关函数"></a>数学相关函数</h5><ul><li>abs()    返回绝对值    <code>print(abs(-9))#9</code></li><li>sum()    求和    <code>print(sum([1,2,3,4,5]))#15</code></li><li>max()    最大值    <code>print(max([1,2,3,4,5]))\print(max(1,2,3,4,5))#5</code>        </li><li>min()    最小值   <code>print(min([1,2,3,4,5]))#1</code></li><li>pow    幂运算</li><li>round    四舍五入</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">round函数的特殊情况</span><br><span class="line">奇进偶退</span><br><span class="line">print(round(7.5))</span><br><span class="line">print(round(6.5))</span><br><span class="line">print(round(7.4))</span><br><span class="line">print(round(6.4))</span><br><span class="line">print(round(6.6))</span><br><span class="line">print(round(7.6))</span><br><span class="line">8#对比第一第二个发现了什么嘛</span><br><span class="line">6</span><br><span class="line">7#看出来它只对.5情况生效</span><br><span class="line">6</span><br><span class="line">7#没写补上，0.5和-0.5的情况下都为0</span><br><span class="line">8</span><br></pre></td></tr></table></figure><h5 id="进制相关函数"><a href="#进制相关函数" class="headerlink" title="进制相关函数"></a>进制相关函数</h5><ul><li>bin()    转为二进制</li><li>int()    整型，十进制（在二进制前+0b同样可以实现转为10进制）</li><li>oct()    转为八进制</li><li>hex()    转为十六进制</li><li>ord()    将Ascii字符转为数字<code>print(ord(&#39;A&#39;))#65</code>    </li><li>chr()    将数字转为Ascii码<code>print(chr(65))#A</code>    </li></ul><h6 id="补充-1"><a href="#补充-1" class="headerlink" title="补充"></a>补充</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用字符串截取形式去点前2个字符</span><br><span class="line">print(bin(123)[2:])</span><br><span class="line">#1111011#其他同理</span><br></pre></td></tr></table></figure><h4 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h4><h5 id="sorted"><a href="#sorted" class="headerlink" title="sorted()"></a>sorted()</h5><h6 id="功能-3"><a href="#功能-3" class="headerlink" title="功能"></a>功能</h6><ul><li>排序</li></ul><h6 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sorted(iterable, cmp=None, key=None, reverse=False)</span><br></pre></td></tr></table></figure><h6 id="参数-6"><a href="#参数-6" class="headerlink" title="参数"></a>参数</h6><ul><li>iterable – 可迭代对象。</li><li>cmp – 比较的函数，这个具有两个参数，参数的值都是从可迭代对象中取出，此函数必须遵守的规则为，大于则返回1，小于则返回-1，等于则返回0。</li><li>key – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</li><li>reverse – 排序规则，reverse = True 降序 ， reverse = False 升序（默认）。</li></ul><h6 id="返回值-5"><a href="#返回值-5" class="headerlink" title="返回值"></a>返回值</h6><blockquote><p>返回重新排序的列表。</p></blockquote><h6 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1.arr = [-4,-2,3]</span><br><span class="line">res = sorted(arr,key=abs)#会警告但不报错</span><br><span class="line">print(res)</span><br><span class="line">#[-2, 3, -4]#以绝对值为例排序，但不变为绝对值（我一直以为会变成绝对值）</span><br><span class="line">2. func(num):#定义自定义排序方式</span><br><span class="line">    print(num,num%2)</span><br><span class="line">    return num% 2</span><br><span class="line">arr = [3,2,4,6,5,7,9]</span><br><span class="line">res = sorted(arr,key=func)</span><br><span class="line">print(res)</span><br><span class="line">#6 0</span><br><span class="line">5 1</span><br><span class="line">7 1</span><br><span class="line">9 1</span><br><span class="line">[2, 4, 6, 3, 5, 7, 9]</span><br><span class="line">3.arr = [3,2,4,6,5,7,9]</span><br><span class="line">res = sorted(arr,key=lambda x:x%2)#用匿名函数</span><br><span class="line">print(res</span><br><span class="line">#[2, 4, 6, 3, 5, 7, 9]</span><br></pre></td></tr></table></figure><h5 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h5><h6 id="功能-4"><a href="#功能-4" class="headerlink" title="功能"></a>功能</h6><blockquote><p>对传入的可迭代数据中的每个元素进行处理，返回一个新的迭代器</p></blockquote><h6 id="参数-7"><a href="#参数-7" class="headerlink" title="参数"></a>参数</h6><ul><li>function – 函数</li><li>iterable – 一个或多个序列</li></ul><h6 id="返回值-6"><a href="#返回值-6" class="headerlink" title="返回值"></a>返回值</h6><ul><li><p>Python 2.x 返回列表。</p></li><li><p>Python 3.x 返回迭代器</p></li></ul><h6 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#把一个字符串数字的列表转为整型的数字列表</span><br><span class="line">#1.普通方法</span><br><span class="line">varlist = [&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;4&#x27;,&#x27;5&#x27;]</span><br><span class="line">newlist = []</span><br><span class="line">for i in varlist:</span><br><span class="line">    newlist.append(int(i))</span><br><span class="line">print(newlist)</span><br><span class="line">#[1, 2, 3, 4, 5]</span><br><span class="line">#2.使用map函数进行处理</span><br><span class="line">varlist = [&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;4&#x27;,&#x27;5&#x27;]</span><br><span class="line">res = map(int,varlist)</span><br><span class="line">print(list(res))</span><br><span class="line">#[1, 2, 3, 4, 5]</span><br><span class="line">#[1,2,3,4] ==&gt; [1,4,9,16]</span><br><span class="line">#1.普通方法</span><br><span class="line">varlist = [1,2,3,4]</span><br><span class="line">newlist = []</span><br><span class="line">for i in varlist:</span><br><span class="line">    newlist.append(i**2)</span><br><span class="line">print(newlist)</span><br><span class="line">#[1, 4, 9, 16]</span><br><span class="line">#2.使用map函数</span><br><span class="line">varlist = [1,2,3,4]</span><br><span class="line">res = map(lambda x:x**2,varlist)</span><br><span class="line">#[1, 4, 9, 16]</span><br></pre></td></tr></table></figure><h6 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;] --&gt; [65,66,67,68]</span><br><span class="line">varlist = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;]</span><br><span class="line">res = map(lambda x:ord(x)-32,varlist)</span><br><span class="line">print(list(res))</span><br><span class="line">#[65, 66, 67, 68]</span><br></pre></td></tr></table></figure><h5 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h5><h6 id="描述-3"><a href="#描述-3" class="headerlink" title="描述"></a>描述</h6><p><strong>reduce()</strong> 函数会对参数序列中元素进行累积。</p><p>函数将一个数据集合（链表，元组等）中的所有数据进行下列操作：用传给 reduce 中的函数 function（有两个参数）先对集合中的第 1、2 个元素进行操作，得到的结果再与第三个数据用 function 函数运算，最后得到一个结果。</p><blockquote><p><strong>注意：</strong>Python3.x reduce() 已经被移到 functools 模块里，如果我们要使用，需要引入 functools 模块来调用 reduce() 函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from functools import reduce</span><br></pre></td></tr></table></figure></blockquote><h6 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h6><p>reduce() 函数语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reduce(function, iterable[, initializer])</span><br></pre></td></tr></table></figure><h6 id="参数-8"><a href="#参数-8" class="headerlink" title="参数"></a>参数</h6><ul><li>function – 函数，有两个参数</li><li>iterable – 可迭代的数据对象（元组，列表）</li><li>initializer – 可选，初始参数</li></ul><h6 id="返回值-7"><a href="#返回值-7" class="headerlink" title="返回值"></a>返回值</h6><p>返回函数计算结果。</p><h6 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from functools import reduce</span><br><span class="line">varlist = [5,2,3,1]</span><br><span class="line">res = reduce(lambda x,y:x*y,varlist)</span><br><span class="line">print(res)</span><br><span class="line">#等于5*2*3*1=30</span><br><span class="line">&#x27;456&#x27;--&gt;456</span><br><span class="line">def func(x):</span><br><span class="line">    vard = &#123;&#x27;0&#x27;:0,&#x27;1&#x27;:1,&#x27;2&#x27;:2,&#x27;4&#x27;:4,&#x27;5&#x27;:5,&#x27;6&#x27;:6&#125;</span><br><span class="line">    return vard[x]</span><br><span class="line">iter1 = map(func,&#x27;456&#x27;)</span><br><span class="line">iter2 = reduce(lambda x,y:x*10+y,iter1)</span><br><span class="line">print(iter2)</span><br><span class="line">#456</span><br></pre></td></tr></table></figure><h5 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h5><h6 id="描述-4"><a href="#描述-4" class="headerlink" title="描述"></a>描述</h6><p><strong>filter()</strong> 函数用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表。</p><p>该接收两个参数，第一个为函数，第二个为序列，序列的每个元素作为参数传递给函数进行判断，然后返回 True 或 False，最后将返回 True 的元素放到新列表中。</p><blockquote><p><strong>注意:</strong> Python2.7 返回列表，Python3.x 返回迭代器对象。</p></blockquote><h6 id="功能-5"><a href="#功能-5" class="headerlink" title="功能"></a>功能</h6><ul><li>过滤数据，把元素拿到函数中进行处理，返回True则保留，反之丢弃</li></ul><h6 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h6><p>以下是 filter() 方法的语法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter(function, iterable)</span><br></pre></td></tr></table></figure><h6 id="参数-9"><a href="#参数-9" class="headerlink" title="参数"></a>参数</h6><ul><li>function – 判断函数。</li><li>iterable – 可迭代对象。</li></ul><h6 id="返回值-8"><a href="#返回值-8" class="headerlink" title="返回值"></a>返回值</h6><p>返回列表。</p><hr><h6 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var = range(1,10)</span><br><span class="line">it = filter(lambda n:True if n % 2 == 0 else False,var)</span><br><span class="line">print(list(it))</span><br><span class="line">#[2, 4, 6, 8]</span><br></pre></td></tr></table></figure><h3 id="详解字符串"><a href="#详解字符串" class="headerlink" title="详解字符串"></a>详解字符串</h3><h5 id="定义方式"><a href="#定义方式" class="headerlink" title="定义方式"></a>定义方式</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.var = &#x27;&#x27;</span><br><span class="line">2.var = &quot;&quot;</span><br><span class="line">3.var = &#x27;&#x27;&#x27;&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><h5 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var = &#x27;&quot;gg&quot;,&quot;cc&quot;,&quot;cc&quot;&#x27;</span><br></pre></td></tr></table></figure><h4 id="转义字符-1"><a href="#转义字符-1" class="headerlink" title="转义字符"></a>转义字符</h4><h6 id="描述-5"><a href="#描述-5" class="headerlink" title="描述"></a>描述</h6><blockquote><p>一个普通字符在转义符’&#39;的后面，实现宁外一种意义</p></blockquote><table><thead><tr><th align="center">转义字符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">\n</td><td align="center">换行符，将光标位置移到下一行开头。</td></tr><tr><td align="center">\r</td><td align="center">回车符，将光标位置移到本行开头。</td></tr><tr><td align="center">\t</td><td align="center">水平制表符，也即 Tab 键，一般相当于四个空格。</td></tr><tr><td align="center">\a</td><td align="center">蜂鸣器响铃。注意不是喇叭发声，现在的计算机很多都不带蜂鸣器了，所以响铃不一定有效。</td></tr><tr><td align="center">\b</td><td align="center">退格（Backspace），将光标位置移到前一列。</td></tr><tr><td align="center">\</td><td align="center">反斜线</td></tr><tr><td align="center">&#39;</td><td align="center">单引号</td></tr><tr><td align="center">&quot;</td><td align="center">双引号</td></tr><tr><td align="center">\</td><td align="center">在字符串行尾的续行符，即一行未完，转到下一行继续写。</td></tr></tbody></table><h4 id="相关操作"><a href="#相关操作" class="headerlink" title="相关操作"></a>相关操作</h4><table><thead><tr><th>操作</th><th>描述</th></tr></thead><tbody><tr><td>+，’a’+’b’=’ab’</td><td>将两个字符串拼接成一个字符串，中间不隔开</td></tr><tr><td>*，’a’*5=’aaaaa’</td><td>把字符串重复*次，中间不隔开</td></tr><tr><td>切片，str[开始值:结束值:步进值]</td><td>正数0开始，倒数-1开始，中间用冒号隔开，默认步进1，不写获取所有</td></tr></tbody></table><h6 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">## var = &#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span><br><span class="line"># print(var[2])#获取指定下标值</span><br><span class="line"># print(var[2:5])#从2开始，至5结束，不包括5</span><br><span class="line"># print(var[4:8:2])#间隔为2，意为每隔1个取一个</span><br><span class="line"># print(var[::])#从头取到尾，即默认</span><br><span class="line"># print(var[::2])#隔一个取一个</span><br><span class="line"># print(var[::-1])#字符串倒过来</span><br><span class="line"># print(var[::-2])#倒过来，隔一个取一个</span><br><span class="line">c</span><br><span class="line">cde</span><br><span class="line">eg</span><br><span class="line">abcdefghijklmnopqrstuvwxyz</span><br><span class="line">acegikmoqsuwy</span><br><span class="line">zyxwvutsrqponmlkjihgfedcba</span><br><span class="line">zxvtrpnljhfdb</span><br></pre></td></tr></table></figure><h4 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h4><h5 id="format"><a href="#format" class="headerlink" title="format()"></a>format()</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1.普通方式</span><br><span class="line">a = &#x27;床前&#x27;</span><br><span class="line">var = &#x27;&#123;&#125;明月光&#x27;.format(a)</span><br><span class="line">2.索引传参</span><br><span class="line">a = &#x27;上光&#x27;</span><br><span class="line">b = &#x27;床前&#x27;</span><br><span class="line">var = &#x27;&#123;1&#125;明月光，疑是地&#123;0&#125;&#x27;.format(a,b)</span><br><span class="line">print(var)</span><br><span class="line">#床前明月光，疑是地上光</span><br><span class="line">3.关键字传参</span><br><span class="line">var = &#x27;&#123;&#125;明月光&#x27;.format(a=&#x27;床前&#x27;)</span><br><span class="line">4.容器类型数据传参</span><br><span class="line">rlist = [&#x27;上光&#x27;,&#x27;床前&#x27;]</span><br><span class="line">var = &#x27;&#123;1&#125;明月光，疑是地&#123;0&#125;&#x27;.format(*rlist)</span><br><span class="line">print(var)</span><br><span class="line">#床前明月光，疑是地上光</span><br><span class="line">#注意容器下标还有&#x27;*&#x27;号（用于取值，没有会报错），字典（**）</span><br><span class="line">5.f方法</span><br><span class="line">#f是format的缩写</span><br><span class="line">my_list = [&#x27;菜鸟教程&#x27;, &#x27;www.runoob.com&#x27;]</span><br><span class="line">print(f&quot;网站名：&#123;my_list[0]&#125;, 地址 &#123;my_list[1]&#125;&quot;) </span><br><span class="line">#网站名：菜鸟教程, 地址 www.runoob.com</span><br><span class="line">6.限定小数点</span><br><span class="line">var = &#x27;圆周率是多少：&#123;:.2f&#125;&#x27;.format(3.1415926)</span><br><span class="line">print(var)</span><br><span class="line">#圆周率是多少：3.14</span><br></pre></td></tr></table></figure><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><h4 id="字符大小写相关函数"><a href="#字符大小写相关函数" class="headerlink" title="字符大小写相关函数"></a>字符大小写相关函数</h4><h5 id="Python-capitalize-方法"><a href="#Python-capitalize-方法" class="headerlink" title="Python capitalize()方法"></a>Python capitalize()方法</h5><h6 id="描述-6"><a href="#描述-6" class="headerlink" title="描述"></a>描述</h6><p>Python capitalize() 将字符串的第一个字母变成大写,其他字母变小写。对于 8 位字节编码需要根据本地环境。</p><h6 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h6><p>capitalize()方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.capitalize()</span><br></pre></td></tr></table></figure><h6 id="参数-10"><a href="#参数-10" class="headerlink" title="参数"></a>参数</h6><ul><li>无。</li></ul><h6 id="返回值-9"><a href="#返回值-9" class="headerlink" title="返回值"></a>返回值</h6><p>该方法返回一个首字母大写的字符串。</p><h6 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var = &#x27;hello world&#x27;</span><br><span class="line">var = &#x27;hello world&#x27;</span><br><span class="line">var = var.capitalize()</span><br><span class="line">print(var)</span><br><span class="line">#Hello world</span><br></pre></td></tr></table></figure><h5 id="Python-title-方法"><a href="#Python-title-方法" class="headerlink" title="Python title()方法"></a>Python title()方法</h5><h6 id="描述-7"><a href="#描述-7" class="headerlink" title="描述"></a>描述</h6><p>Python title() 方法返回”标题化”的字符串,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())。</p><h6 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h6><p>title()方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.title();</span><br></pre></td></tr></table></figure><h6 id="参数-11"><a href="#参数-11" class="headerlink" title="参数"></a>参数</h6><ul><li>NA。</li></ul><h6 id="返回值-10"><a href="#返回值-10" class="headerlink" title="返回值"></a>返回值</h6><p>返回”标题化”的字符串,就是说所有单词都是以大写开始。</p><h6 id="实例-13"><a href="#实例-13" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var = &#x27;hello world&#x27;</span><br><span class="line">var = var.title()</span><br><span class="line">print(var)</span><br><span class="line">#Hello World</span><br></pre></td></tr></table></figure><h5 id="Python-upper-方法"><a href="#Python-upper-方法" class="headerlink" title="Python upper()方法"></a>Python upper()方法</h5><h6 id="描述-8"><a href="#描述-8" class="headerlink" title="描述"></a>描述</h6><p>Python upper() 方法将字符串中的小写字母转为大写字母。</p><h6 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h6><p>upper()方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.upper()</span><br></pre></td></tr></table></figure><h6 id="参数-12"><a href="#参数-12" class="headerlink" title="参数"></a>参数</h6><ul><li>NA。</li></ul><h6 id="返回值-11"><a href="#返回值-11" class="headerlink" title="返回值"></a>返回值</h6><p>返回小写字母转为大写字母的字符串。</p><h6 id="实例-14"><a href="#实例-14" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var = &#x27;hello world&#x27;</span><br><span class="line">var = var.upper()</span><br><span class="line">print(var)</span><br><span class="line">#HELLO WORLD</span><br></pre></td></tr></table></figure><h5 id="Python-lower-方法"><a href="#Python-lower-方法" class="headerlink" title="Python lower()方法"></a>Python lower()方法</h5><h6 id="描述-9"><a href="#描述-9" class="headerlink" title="描述"></a>描述</h6><p>Python lower() 方法转换字符串中所有大写字符为小写。</p><h6 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h6><p>lower()方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.lower()</span><br></pre></td></tr></table></figure><h6 id="参数-13"><a href="#参数-13" class="headerlink" title="参数"></a>参数</h6><ul><li>无。</li></ul><h6 id="返回值-12"><a href="#返回值-12" class="headerlink" title="返回值"></a>返回值</h6><p>返回将字符串中所有大写字符转换为小写后生成的字符串。</p><h6 id="实例-15"><a href="#实例-15" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var = &#x27;HELLO WORLD&#x27;</span><br><span class="line">var = var.lower()</span><br><span class="line">print(var)</span><br><span class="line">#hello world</span><br></pre></td></tr></table></figure><h5 id="Python-swapcase-方法"><a href="#Python-swapcase-方法" class="headerlink" title="Python swapcase()方法"></a>Python swapcase()方法</h5><h6 id="描述-10"><a href="#描述-10" class="headerlink" title="描述"></a>描述</h6><p>Python <strong>swapcase()</strong> 方法用于对字符串的大小写字母进行转换，<strong>即将大写字母转换为小写字母，小写字母会转换为大写字母</strong>。</p><h6 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h6><p><strong>swapcase()</strong> 方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.swapcase();</span><br></pre></td></tr></table></figure><h6 id="参数-14"><a href="#参数-14" class="headerlink" title="参数"></a>参数</h6><ul><li>NA。</li></ul><h6 id="返回值-13"><a href="#返回值-13" class="headerlink" title="返回值"></a>返回值</h6><p>返回大小写字母转换后生成的新字符串。</p><h6 id="实例-16"><a href="#实例-16" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var = &#x27;hEllO wORLD&#x27;</span><br><span class="line">var = var.swapcase()</span><br><span class="line">print(var)</span><br><span class="line">#HeLLo World</span><br></pre></td></tr></table></figure><h4 id="字符检测相关函数"><a href="#字符检测相关函数" class="headerlink" title="字符检测相关函数"></a>字符检测相关函数</h4><h5 id="Python-isupper-方法"><a href="#Python-isupper-方法" class="headerlink" title="Python isupper()方法"></a>Python isupper()方法</h5><h6 id="描述-11"><a href="#描述-11" class="headerlink" title="描述"></a>描述</h6><p>Python isupper() 方法检测字符串中所有的字母是否都为大写。</p><h6 id="语法-14"><a href="#语法-14" class="headerlink" title="语法"></a>语法</h6><p>isupper()方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.isupper()</span><br></pre></td></tr></table></figure><h6 id="参数-15"><a href="#参数-15" class="headerlink" title="参数"></a>参数</h6><ul><li>无。</li></ul><h6 id="返回值-14"><a href="#返回值-14" class="headerlink" title="返回值"></a>返回值</h6><p>如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False</p><h6 id="实例-17"><a href="#实例-17" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var = &#x27;HELLO WORLD&#x27;</span><br><span class="line">var = var.isupper()</span><br><span class="line">print(var)</span><br><span class="line">#True #反之则为Flase，不检测中文、空格等其他符号</span><br></pre></td></tr></table></figure><h5 id="Python-islower-方法"><a href="#Python-islower-方法" class="headerlink" title="Python islower()方法"></a>Python islower()方法</h5><h6 id="描述-12"><a href="#描述-12" class="headerlink" title="描述"></a>描述</h6><p>Python islower() 方法检测字符串是否由小写字母组成。</p><h6 id="语法-15"><a href="#语法-15" class="headerlink" title="语法"></a>语法</h6><p>islower()方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.islower()</span><br></pre></td></tr></table></figure><h6 id="参数-16"><a href="#参数-16" class="headerlink" title="参数"></a>参数</h6><ul><li>无。</li></ul><h6 id="返回值-15"><a href="#返回值-15" class="headerlink" title="返回值"></a>返回值</h6><p>如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False</p><h6 id="实例-18"><a href="#实例-18" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var = &#x27;HELLO WORLD&#x27;</span><br><span class="line">var = var.islower()</span><br><span class="line">print(var)</span><br><span class="line">#False #与上面那个方法类似，检测是否为全小写</span><br></pre></td></tr></table></figure><h5 id="Python-isalnum-方法"><a href="#Python-isalnum-方法" class="headerlink" title="Python isalnum()方法"></a>Python isalnum()方法</h5><h6 id="描述-13"><a href="#描述-13" class="headerlink" title="描述"></a>描述</h6><p>Python isalnum() 方法检测字符串是否由字母和数字组成。</p><h6 id="语法-16"><a href="#语法-16" class="headerlink" title="语法"></a>语法</h6><p>isalnum()方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.isalnum()</span><br></pre></td></tr></table></figure><h6 id="参数-17"><a href="#参数-17" class="headerlink" title="参数"></a>参数</h6><ul><li>无。</li></ul><h6 id="返回值-16"><a href="#返回值-16" class="headerlink" title="返回值"></a>返回值</h6><p>如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True,否则返回 False</p><h6 id="实例-19"><a href="#实例-19" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var = &#x27;wo爱ni1314&#x27;</span><br><span class="line">var = var.isalnum()</span><br><span class="line">print(var)</span><br><span class="line">#True #其实还包括中文，但是官方解释如此，出现这三种外的字符（包括空格）直接Flase</span><br></pre></td></tr></table></figure><h5 id="Python-isalpha-方法"><a href="#Python-isalpha-方法" class="headerlink" title="Python isalpha()方法"></a>Python isalpha()方法</h5><h6 id="描述-14"><a href="#描述-14" class="headerlink" title="描述"></a>描述</h6><p>Python isalpha() 方法检测字符串是否只由字母组成。</p><h6 id="语法-17"><a href="#语法-17" class="headerlink" title="语法"></a>语法</h6><p>isalpha()方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.isalpha()</span><br></pre></td></tr></table></figure><h6 id="参数-18"><a href="#参数-18" class="headerlink" title="参数"></a>参数</h6><ul><li>无。</li></ul><h6 id="返回值-17"><a href="#返回值-17" class="headerlink" title="返回值"></a>返回值</h6><p>如果字符串至少有一个字符并且所有字符都是字母则返回 True，否则返回 False。</p><h6 id="实例-20"><a href="#实例-20" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var = &#x27;iloveyou一生一世&#x27;</span><br><span class="line">var = var.isalpha()</span><br><span class="line">print(var)</span><br><span class="line">#True</span><br></pre></td></tr></table></figure><h5 id="Python-isdigit-方法"><a href="#Python-isdigit-方法" class="headerlink" title="Python isdigit()方法"></a>Python isdigit()方法</h5><h6 id="描述-15"><a href="#描述-15" class="headerlink" title="描述"></a>描述</h6><p>Python isdigit() 方法检测字符串是否只由数字组成。</p><h6 id="语法-18"><a href="#语法-18" class="headerlink" title="语法"></a>语法</h6><p>isdigit()方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.isdigit()</span><br></pre></td></tr></table></figure><h6 id="参数-19"><a href="#参数-19" class="headerlink" title="参数"></a>参数</h6><ul><li>无。</li></ul><h6 id="返回值-18"><a href="#返回值-18" class="headerlink" title="返回值"></a>返回值</h6><p>如果字符串只包含数字则返回 True 否则返回 False。</p><h6 id="实例-21"><a href="#实例-21" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var = &#x27;5201314&#x27;</span><br><span class="line">var = var.isdigit()</span><br><span class="line">print(var)</span><br><span class="line">#True</span><br></pre></td></tr></table></figure><h5 id="Python-isspace-方法"><a href="#Python-isspace-方法" class="headerlink" title="Python isspace()方法"></a>Python isspace()方法</h5><h6 id="描述-16"><a href="#描述-16" class="headerlink" title="描述"></a>描述</h6><p>Python isspace() 方法检测字符串是否只由空格组成。</p><h6 id="语法-19"><a href="#语法-19" class="headerlink" title="语法"></a>语法</h6><p>isspace()方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.isspace()</span><br></pre></td></tr></table></figure><h6 id="参数-20"><a href="#参数-20" class="headerlink" title="参数"></a>参数</h6><ul><li>无。</li></ul><h6 id="返回值-19"><a href="#返回值-19" class="headerlink" title="返回值"></a>返回值</h6><p>如果字符串中只包含空格，则返回 True，否则返回 False.</p><h6 id="实例-22"><a href="#实例-22" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var = &#x27; \t\n&#x27;</span><br><span class="line">for i in var:</span><br><span class="line">    print(i.isspace())</span><br><span class="line">#True</span><br><span class="line">#True</span><br><span class="line">#True</span><br><span class="line">#tab,空格，换行都为True</span><br></pre></td></tr></table></figure><h5 id="Python-startswith-方法"><a href="#Python-startswith-方法" class="headerlink" title="Python startswith()方法"></a>Python startswith()方法</h5><h6 id="描述-17"><a href="#描述-17" class="headerlink" title="描述"></a>描述</h6><p>Python startswith() 方法用于检查字符串是否是以指定子字符串开头，如果是则返回 True，否则返回 False。如果参数 beg 和 end 指定值，则在指定范围内检查。</p><h6 id="语法-20"><a href="#语法-20" class="headerlink" title="语法"></a>语法</h6><p>startswith()方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.startswith(str, beg=0,end=len(string));</span><br></pre></td></tr></table></figure><h6 id="参数-21"><a href="#参数-21" class="headerlink" title="参数"></a>参数</h6><ul><li>str – 检测的字符串。</li><li>strbeg – 可选参数用于设置字符串检测的起始位置。</li><li>strend – 可选参数用于设置字符串检测的结束位置。</li></ul><h6 id="返回值-20"><a href="#返回值-20" class="headerlink" title="返回值"></a>返回值</h6><p>如果检测到字符串则返回True，否则返回False。</p><h6 id="实例-23"><a href="#实例-23" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var = &#x27;Hello World&#x27;</span><br><span class="line">res = var.startswith(&#x27;H&#x27;)</span><br><span class="line">print(res)</span><br><span class="line">#True</span><br><span class="line">var = &#x27;Hello World&#x27;</span><br><span class="line">res = var.startswith(&#x27;H&#x27;,1)</span><br><span class="line">print(res)</span><br><span class="line">#Flase</span><br><span class="line">#一般不必要指定结束的位置，可以判断多个，这里只写了一个</span><br></pre></td></tr></table></figure><h5 id="Python-endswith-方法"><a href="#Python-endswith-方法" class="headerlink" title="Python endswith()方法"></a>Python endswith()方法</h5><h6 id="描述-18"><a href="#描述-18" class="headerlink" title="描述"></a>描述</h6><p>Python endswith() 方法用于判断字符串是否以指定后缀结尾，如果以指定后缀结尾返回True，否则返回False。可选参数”start”与”end”为检索字符串的开始与结束位置。</p><h6 id="语法-21"><a href="#语法-21" class="headerlink" title="语法"></a>语法</h6><p>endswith()方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.endswith(suffix[, start[, end]])</span><br></pre></td></tr></table></figure><h6 id="参数-22"><a href="#参数-22" class="headerlink" title="参数"></a>参数</h6><ul><li>suffix – 该参数可以是一个字符串或者是一个元素。</li><li>start – 字符串中的开始位置。</li><li>end – 字符中结束位置。</li></ul><h6 id="返回值-21"><a href="#返回值-21" class="headerlink" title="返回值"></a>返回值</h6><p>如果字符串含有指定的后缀返回True，否则返回False。</p><h6 id="实例-24"><a href="#实例-24" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var = &#x27;Hello World&#x27;</span><br><span class="line">res = var.endswith(&#x27;World&#x27;)</span><br><span class="line">print(res)</span><br><span class="line">#True </span><br></pre></td></tr></table></figure><h4 id="字符串查找相关函数（重点）"><a href="#字符串查找相关函数（重点）" class="headerlink" title="字符串查找相关函数（重点）"></a>字符串查找相关函数（重点）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var = &#x27;iloveyou&#x27;</span><br><span class="line">@检测一个字符串是否存在另一个字符串中</span><br><span class="line">res = &#x27;love&#x27; in var</span><br><span class="line">#True</span><br><span class="line">@获取字符串的长度</span><br><span class="line">res = len(var)</span><br><span class="line">#8</span><br><span class="line">@获取指定字符在字符串中的索引位置，未找到则返回-1</span><br><span class="line">res = var.find(&#x27;you&#x27;) </span><br><span class="line">#5 #返回首字母的索引位置</span><br><span class="line">res = var.find(&#x27;you&#x27;,0,4)</span><br><span class="line">#-1 #可以指定开始和结束的索引位置</span><br><span class="line">@从右边开始找</span><br><span class="line">res = var.rfind(&#x27;you&#x27;)</span><br><span class="line">@str.index()与find类似，如果没有找到则报错</span><br><span class="line">res = var.index(&#x27;you&#x27;)</span><br><span class="line">#5</span><br><span class="line">@同样也有个rindex(),就不多说了</span><br><span class="line">@计算字符出现的次数并返回统计出来</span><br><span class="line">var = &#x27;Hello World&#x27;</span><br><span class="line">print(var.count(&#x27;H&#x27;))</span><br><span class="line">#1</span><br></pre></td></tr></table></figure><h6 id="作业-1"><a href="#作业-1" class="headerlink" title="作业"></a>作业</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">单词全背，各敲三遍</span><br></pre></td></tr></table></figure><h4 id="字符串操作相关函数-重点"><a href="#字符串操作相关函数-重点" class="headerlink" title="字符串操作相关函数(重点)"></a>字符串操作相关函数(重点)</h4><h5 id="Python-split-方法"><a href="#Python-split-方法" class="headerlink" title="Python split()方法"></a>Python split()方法</h5><h6 id="描述-19"><a href="#描述-19" class="headerlink" title="描述"></a>描述</h6><p>Python <strong>split()</strong> 通过指定分隔符对字符串进行切片，如果参数 num 有指定值，则分隔 num+1 个子字符串</p><h6 id="语法-22"><a href="#语法-22" class="headerlink" title="语法"></a>语法</h6><p>split() 方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.split(str=&quot;&quot;, num=string.count(str)).</span><br></pre></td></tr></table></figure><h6 id="参数-23"><a href="#参数-23" class="headerlink" title="参数"></a>参数</h6><ul><li>str – 分隔符，默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等。</li><li>num – 分割次数。默认为 -1, 即分隔所有。</li></ul><h6 id="返回值-22"><a href="#返回值-22" class="headerlink" title="返回值"></a>返回值</h6><p>返回分割后的字符串列表。</p><h6 id="实例-25"><a href="#实例-25" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">@普通方法</span><br><span class="line">var = &#x27;i,love,you,you,you&#x27;</span><br><span class="line">res = var.split(&#x27;,&#x27;,-1)</span><br><span class="line">print(res)</span><br><span class="line">#[&#x27;i&#x27;, &#x27;love&#x27;, &#x27;you&#x27;, &#x27;you&#x27;, &#x27;you&#x27;]</span><br><span class="line">#要注意的是，split是以什么什么分割字符串，指定的字符最好有序可言</span><br><span class="line">@按照指定的字符分割，把一个字符串分割成一个列表</span><br><span class="line">var = &#x27;user_admin_id_123&#x27;</span><br><span class="line">res = var.split(&#x27;_&#x27;)</span><br><span class="line">print(res)</span><br><span class="line">#[&#x27;user&#x27;, &#x27;admin&#x27;, &#x27;id&#x27;, &#x27;123&#x27;]</span><br><span class="line">@有多个分割字符时</span><br><span class="line">var = &#x27;user_admin_id_123&#x27;</span><br><span class="line">vars = &#x27;uid=123&amp;type=ad&amp;key=by&#x27;</span><br><span class="line">res = vars.split(&#x27;&amp;&#x27;)</span><br><span class="line">for i in res:</span><br><span class="line">    r = i.split(&#x27;=&#x27;)</span><br><span class="line">    print(r.pop())#pop是列表中的移除方法，默认移除末尾元素，</span><br><span class="line">print(res)</span><br><span class="line">#123</span><br><span class="line">#ad</span><br><span class="line">#by</span><br><span class="line">#[&#x27;uid=123&#x27;, &#x27;type=ad&#x27;, &#x27;key=by&#x27;]</span><br><span class="line">@可以指定分割的次数</span><br><span class="line">var = &#x27;user_admin_id_123&#x27;</span><br><span class="line">res = var.split(&#x27;_&#x27;,2)</span><br><span class="line">print(res)</span><br><span class="line">#[&#x27;user&#x27;, &#x27;admin&#x27;, &#x27;id_123&#x27;]</span><br><span class="line">@rspilt,不加次数与spilt相同，加了就是从右边开始</span><br><span class="line">res = var.rsplit(&#x27;_&#x27;,2)</span><br><span class="line">print(res)</span><br><span class="line">#[&#x27;user_admin&#x27;, &#x27;id&#x27;, &#x27;123&#x27;]</span><br></pre></td></tr></table></figure><h5 id="Python-join-方法"><a href="#Python-join-方法" class="headerlink" title="Python join()方法"></a>Python join()方法</h5><h6 id="描述-20"><a href="#描述-20" class="headerlink" title="描述"></a>描述</h6><p>Python join() 方法用于将序列中的元素以指定的字符连接生成一个新的字符串。</p><h6 id="语法-23"><a href="#语法-23" class="headerlink" title="语法"></a>语法</h6><p>join()方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.join(sequence)</span><br></pre></td></tr></table></figure><h6 id="参数-24"><a href="#参数-24" class="headerlink" title="参数"></a>参数</h6><ul><li>sequence – 要连接的元素序列。</li></ul><h6 id="返回值-23"><a href="#返回值-23" class="headerlink" title="返回值"></a>返回值</h6><p>返回通过指定字符连接序列中元素后生成的新字符串。</p><h6 id="实例-26"><a href="#实例-26" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@按照指定的字符串，吧容器类型中的数据链接成一个字符串</span><br><span class="line">arr = [&#x27;user&#x27;,&#x27;admin&#x27;,&#x27;id&#x27;,&#x27;123&#x27;]</span><br><span class="line">res = &#x27;%&#x27;.join(arr)</span><br><span class="line">print(res)</span><br><span class="line">#user%admin%id%123</span><br></pre></td></tr></table></figure><h5 id="Python-strip-方法"><a href="#Python-strip-方法" class="headerlink" title="Python strip()方法"></a>Python strip()方法</h5><h6 id="描述-21"><a href="#描述-21" class="headerlink" title="描述"></a>描述</h6><p>Python strip() 方法用于移除字符串头尾指定的字符（默认为空格或换行符）或字符序列。</p><p><strong>注意：</strong>该方法只能删除开头或是结尾的字符，不能删除中间部分的字符。</p><h6 id="语法-24"><a href="#语法-24" class="headerlink" title="语法"></a>语法</h6><p>strip()方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.strip([chars]);</span><br></pre></td></tr></table></figure><h6 id="参数-25"><a href="#参数-25" class="headerlink" title="参数"></a>参数</h6><ul><li>chars – 移除字符串头尾指定的字符序列。</li></ul><h6 id="返回值-24"><a href="#返回值-24" class="headerlink" title="返回值"></a>返回值</h6><p>返回移除字符串头尾指定的字符生成的新字符串。</p><h6 id="实例-27"><a href="#实例-27" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var = &#x27;     abc     &#x27;</span><br><span class="line">res = var.strip(&#x27; &#x27;)</span><br><span class="line">print(res)</span><br><span class="line">#abc</span><br><span class="line">@lstrip,去除左侧的指定字符</span><br><span class="line">@rstrip,去除右侧的指定字符</span><br></pre></td></tr></table></figure><h5 id="Python-replace-方法"><a href="#Python-replace-方法" class="headerlink" title="Python replace()方法"></a>Python replace()方法</h5><h6 id="描述-22"><a href="#描述-22" class="headerlink" title="描述"></a>描述</h6><p>Python replace() 方法把字符串中的 old（旧字符串） 替换成 new(新字符串)，如果指定第三个参数max，则替换不超过 max 次。</p><h6 id="语法-25"><a href="#语法-25" class="headerlink" title="语法"></a>语法</h6><p>replace()方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.replace(old, new[, max])</span><br></pre></td></tr></table></figure><h6 id="参数-26"><a href="#参数-26" class="headerlink" title="参数"></a>参数</h6><ul><li>old – 将被替换的子字符串。</li><li>new – 新字符串，用于替换old子字符串。</li><li>max – 可选字符串, 替换不超过 max 次</li></ul><h6 id="返回值-25"><a href="#返回值-25" class="headerlink" title="返回值"></a>返回值</h6><p>返回字符串中的 old（旧字符串） 替换成 new(新字符串)后生成的新字符串，如果指定第三个参数max，则替换不超过 max 次。</p><h6 id="实例-28"><a href="#实例-28" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var = &#x27;iloveyouyouyou&#x27;</span><br><span class="line">res = var.replace(&#x27;you&#x27;,&#x27;Ironman&#x27;,1)#1指替换次数</span><br><span class="line">print(res)</span><br><span class="line">#iloveIronmanyouyou</span><br></pre></td></tr></table></figure><h5 id="Python-center-方法"><a href="#Python-center-方法" class="headerlink" title="Python center()方法"></a>Python center()方法</h5><h6 id="描述-23"><a href="#描述-23" class="headerlink" title="描述"></a>描述</h6><p>Python center() 返回一个原字符串居中,并使用空格填充至长度 width 的新字符串。默认填充字符为空格。</p><h6 id="语法-26"><a href="#语法-26" class="headerlink" title="语法"></a>语法</h6><p>center()方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.center(width[, fillchar])</span><br></pre></td></tr></table></figure><h6 id="参数-27"><a href="#参数-27" class="headerlink" title="参数"></a>参数</h6><ul><li>width – 字符串的总宽度。</li><li>fillchar – 填充字符。</li></ul><h6 id="返回值-26"><a href="#返回值-26" class="headerlink" title="返回值"></a>返回值</h6><p>该方法返回一个原字符串居中,并使用空格填充至长度 width 的新字符串。</p><h6 id="实例-29"><a href="#实例-29" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var = &#x27;iloveyou&#x27;</span><br><span class="line">res = var.center(12,&#x27;@&#x27;)</span><br><span class="line">print(res)</span><br><span class="line">#@@iloveyou@@</span><br><span class="line">#整体为12各字符，不够的在两边加上</span><br></pre></td></tr></table></figure><h6 id="补充-2"><a href="#补充-2" class="headerlink" title="补充"></a>补充</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rjust&amp;&amp;ljust</span><br><span class="line">rjust:整体为12个，不够的在左边补上</span><br><span class="line">var = &#x27;iloveyou&#x27;</span><br><span class="line">res = var.rjust(12,&#x27;@&#x27;)</span><br><span class="line">print(res)</span><br><span class="line">#@@@@iloveyou #对，你没看错，它说的是你本来的字符串在右边</span><br><span class="line">ljust:整体为12个，不够的在右边补上</span><br><span class="line">var = &#x27;iloveyou&#x27;</span><br><span class="line">res = var.ljust(12,&#x27;@&#x27;)</span><br><span class="line">print(res)</span><br><span class="line">#iloveyou@@@@</span><br></pre></td></tr></table></figure><h6 id="作业-2"><a href="#作业-2" class="headerlink" title="作业"></a>作业</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">出来了解的后面3个，其他手敲三遍</span><br></pre></td></tr></table></figure><h3 id="数据类型详解-列表"><a href="#数据类型详解-列表" class="headerlink" title="数据类型详解-列表"></a>数据类型详解-列表</h3><ul><li>就是一组有序数据组合，列表中的数据可以被修改</li></ul><h4 id="列表的定义与基本操作"><a href="#列表的定义与基本操作" class="headerlink" title="列表的定义与基本操作"></a>列表的定义与基本操作</h4><ul><li>使用中括号[]定义</li><li>也可以使用list函数定义</li><li>列表中的元素用逗号分割</li><li>列表中的元素可以是任意类型</li></ul><h5 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h5><h6 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var1 = [1,2,3,4]</span><br><span class="line">var2 = [&#x27;a&#x27;,&#x27;v&#x27;,&#x27;b&#x27;]</span><br><span class="line">res = var1 + var2 +[11,22,33]</span><br><span class="line">print(res)</span><br><span class="line">#[1, 2, 3, 4, &#x27;a&#x27;, &#x27;v&#x27;, &#x27;b&#x27;, 11, 22, 33]</span><br><span class="line">#别管警告，不错就行</span><br></pre></td></tr></table></figure><h6 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;] *3</span><br><span class="line">print(res)</span><br><span class="line">#[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br></pre></td></tr></table></figure><h6 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res =&#x27;a&#x27; in [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]</span><br><span class="line">print(res)</span><br><span class="line">#True</span><br></pre></td></tr></table></figure><h6 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"> 0   1   2   3</span><br><span class="line">&#x27;a&#x27; &#x27;b&#x27; &#x27;c&#x27; &#x27;d&#x27;</span><br><span class="line">-4  -3  -2  -1</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">#print()</span><br></pre></td></tr></table></figure><h6 id="索引获取、修改、添加"><a href="#索引获取、修改、添加" class="headerlink" title="索引获取、修改、添加"></a>索引获取、修改、添加</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">获取</span><br><span class="line">var = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;]</span><br><span class="line">res = var[1]</span><br><span class="line">res = var[-3]</span><br><span class="line">print(res)</span><br><span class="line">#b</span><br><span class="line">修改</span><br><span class="line">var = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;]</span><br><span class="line">var[1] = &#x27;x&#x27;</span><br><span class="line">print(var)</span><br><span class="line">#[&#x27;a&#x27;, &#x27;x&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span><br><span class="line">添加</span><br><span class="line">@注意：不能通过下标添加元素，否则会报错</span><br><span class="line">var = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;]</span><br><span class="line">var[4]=&#x27;ff&#x27;</span><br><span class="line">print(var)</span><br><span class="line">IndexError: list assignment index out of range</span><br><span class="line">@正常用法</span><br><span class="line">var = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;]</span><br><span class="line">var.append(&#x27;ff&#x27;)</span><br><span class="line">print(var)</span><br><span class="line">#[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;ff&#x27;]</span><br><span class="line">@不能指定下标添加，否则同样会报错</span><br><span class="line">var = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;]</span><br><span class="line">var[4].append(&#x27;c&#x27;)</span><br><span class="line">print(var)</span><br><span class="line">IndexError: list assignment index out of range</span><br></pre></td></tr></table></figure><h6 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;]</span><br><span class="line">res = len(var)</span><br><span class="line">print(res)</span><br><span class="line">#4</span><br></pre></td></tr></table></figure><h6 id="定义长列表"><a href="#定义长列表" class="headerlink" title="定义长列表"></a>定义长列表</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">作用：不报超出分为的错，可以在定义长度内任意修改、添加元素</span><br><span class="line">var = [0] * 10</span><br><span class="line">print(var)</span><br><span class="line">print(len(var))</span><br><span class="line">#[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span><br><span class="line">#10</span><br><span class="line">var = [0] * 10</span><br><span class="line">var[4]=&#x27;a&#x27;</span><br><span class="line"># var[7].append(3)</span><br><span class="line">print(var)</span><br><span class="line">print(len(var))</span><br><span class="line">#[0, 0, 0, 0, &#x27;a&#x27;, 0, 0, 0, 0, 0]</span><br><span class="line">#10</span><br><span class="line">#但不能用append()</span><br><span class="line">@有趣的方式</span><br><span class="line">a = [1]</span><br><span class="line">print(a)</span><br><span class="line">for i in range(2,10):</span><br><span class="line">    a.append(i)</span><br><span class="line">print(a)</span><br><span class="line">del a[8]</span><br><span class="line">print(a)</span><br><span class="line">#[1]</span><br><span class="line">#[1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line">#[1, 2, 3, 4, 5, 6, 7, 8]</span><br></pre></td></tr></table></figure><h6 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@del</span><br><span class="line">var =[1,2,3,4]</span><br><span class="line">del var[2]#指定下标删除</span><br><span class="line">print(var)</span><br><span class="line">del var#不指定删除所有</span><br><span class="line">print(var)</span><br><span class="line">#[1, 2, 4]</span><br><span class="line">#    print(var)</span><br><span class="line">#NameError: name &#x27;var&#x27; is not defined</span><br></pre></td></tr></table></figure><h6 id="移除"><a href="#移除" class="headerlink" title="移除"></a>移除</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@pop，列表专属方法，至少字符串没这个福分</span><br><span class="line">作用：移除末尾或指定下标的元素</span><br><span class="line">var = [1,2,3,4]</span><br><span class="line">var.pop()</span><br><span class="line">print(var)</span><br><span class="line">var.pop(0)</span><br><span class="line">print(var)</span><br><span class="line">[1, 2, 3]</span><br><span class="line">[2, 3]</span><br><span class="line">补：跟删除的区别就是它不能干掉列表</span><br></pre></td></tr></table></figure><h4 id="列表中的切片"><a href="#列表中的切片" class="headerlink" title="列表中的切片"></a>列表中的切片</h4><h5 id="切片操作"><a href="#切片操作" class="headerlink" title="切片操作"></a>切片操作</h5><h6 id="语法-27"><a href="#语法-27" class="headerlink" title="语法"></a>语法</h6><ul><li>list[0:-1:1]，默认情况</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var = [&#x27;刘德华&#x27;,&#x27;张学友&#x27;,&#x27;黎明&#x27;,&#x27;郭富城&#x27;]</span><br><span class="line">f4 = [&#x27;小沈阳&#x27;,&#x27;刘能&#x27;,&#x27;宋小宝&#x27;,&#x27;赵四&#x27;]</span><br><span class="line">vlist = var + f4</span><br><span class="line">print(vlist[2:])#从第三个开始</span><br><span class="line">print(vlist[:2])#到第三个前结束</span><br><span class="line">print(vlist[2:6])#从第三个到第五个</span><br><span class="line">print(vlist[2:6:2])#步进为2</span><br><span class="line">print(vlist[::-1])#倒序输出，注意哦，是[::-1]哦</span><br><span class="line">[&#x27;黎明&#x27;, &#x27;郭富城&#x27;, &#x27;小沈阳&#x27;, &#x27;刘能&#x27;, &#x27;宋小宝&#x27;, &#x27;赵四&#x27;]</span><br><span class="line">[&#x27;刘德华&#x27;, &#x27;张学友&#x27;]</span><br><span class="line">[&#x27;黎明&#x27;, &#x27;郭富城&#x27;, &#x27;小沈阳&#x27;, &#x27;刘能&#x27;]</span><br><span class="line">[&#x27;黎明&#x27;, &#x27;小沈阳&#x27;]</span><br><span class="line">[&#x27;赵四&#x27;, &#x27;宋小宝&#x27;, &#x27;刘能&#x27;, &#x27;小沈阳&#x27;, &#x27;郭富城&#x27;, &#x27;黎明&#x27;, &#x27;张学友&#x27;, &#x27;刘德华&#x27;]</span><br></pre></td></tr></table></figure><h6 id="更新与删除"><a href="#更新与删除" class="headerlink" title="更新与删除"></a>更新与删除</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@通过切片更新</span><br><span class="line">var = [&#x27;刘德华&#x27;,&#x27;张学友&#x27;,&#x27;黎明&#x27;,&#x27;郭富城&#x27;]</span><br><span class="line">f4 = [&#x27;小沈阳&#x27;,&#x27;刘能&#x27;,&#x27;宋小宝&#x27;,&#x27;赵四&#x27;]</span><br><span class="line">vlist = var + f4</span><br><span class="line">print(vlist)</span><br><span class="line">vlist[2:6] = &#x27;a&#x27;#这一步是2到5的空间变成&#x27;a&#x27;了，</span><br><span class="line">print(vlist)</span><br><span class="line">print(len(vlist))</span><br><span class="line">vlist[2:6] = &#x27;abc&#x27;#这一步是2到5编程&#x27;a&#x27;了，6，7变成&#x27;b&#x27;,&#x27;c&#x27;</span><br><span class="line">print(vlist)</span><br><span class="line">#[&#x27;刘德华&#x27;, &#x27;张学友&#x27;, &#x27;黎明&#x27;, &#x27;郭富城&#x27;, &#x27;小沈阳&#x27;, &#x27;刘能&#x27;, &#x27;宋小宝&#x27;, &#x27;赵四&#x27;]</span><br><span class="line">#[&#x27;刘德华&#x27;, &#x27;张学友&#x27;, &#x27;a&#x27;, &#x27;宋小宝&#x27;, &#x27;赵四&#x27;]</span><br><span class="line">#5</span><br><span class="line">#[&#x27;刘德华&#x27;, &#x27;张学友&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br><span class="line">#使用列表进行[2:6]=&#x27;a&#x27;类似的情况时，&#x27;a&#x27;占掉2到5的空间，并只存在一个</span><br><span class="line">#从指定下标开始，到指定下标结束，并替换为对应的数据，容器类型会拆分元素进行赋值</span><br></pre></td></tr></table></figure><h6 id="补充-3"><a href="#补充-3" class="headerlink" title="补充"></a>补充</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@再讲一下</span><br><span class="line">var  = [0] * 10</span><br><span class="line">var[:] = &#x27;a&#x27;</span><br><span class="line">var[5] = &#x27;b&#x27;</span><br><span class="line">print(var)</span><br><span class="line">#IndexError: list assignment index out of range</span><br><span class="line">#很显然，我们定义了10个空间，但是报错说超出范围，只有可能是空间被占掉了</span><br></pre></td></tr></table></figure><h4 id="列表相关函数"><a href="#列表相关函数" class="headerlink" title="列表相关函数"></a>列表相关函数</h4><h5 id="Python-List-len-方法"><a href="#Python-List-len-方法" class="headerlink" title="Python List len()方法"></a>Python List len()方法</h5><h6 id="描述-24"><a href="#描述-24" class="headerlink" title="描述"></a>描述</h6><p>len() 方法返回列表元素个数。</p><h6 id="语法-28"><a href="#语法-28" class="headerlink" title="语法"></a>语法</h6><p>len()方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">len(list)</span><br></pre></td></tr></table></figure><h6 id="参数-28"><a href="#参数-28" class="headerlink" title="参数"></a>参数</h6><ul><li>list – 要计算元素个数的列表。</li></ul><h6 id="返回值-27"><a href="#返回值-27" class="headerlink" title="返回值"></a>返回值</h6><ul><li>返回列表元素个数</li></ul><h6 id="实例-30"><a href="#实例-30" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var = [&#x27;刘德华&#x27;,&#x27;张学友&#x27;,&#x27;黎明&#x27;,&#x27;郭富城&#x27;]</span><br><span class="line">f4 = [&#x27;小沈阳&#x27;,&#x27;刘能&#x27;,&#x27;宋小宝&#x27;,&#x27;赵四&#x27;]</span><br><span class="line">vlist = var + f4</span><br><span class="line">var = vlist</span><br><span class="line">print(len(var))</span><br><span class="line">#8</span><br></pre></td></tr></table></figure><h5 id="Python-List-append-方法"><a href="#Python-List-append-方法" class="headerlink" title="Python List append()方法"></a>Python List append()方法</h5><h6 id="描述-25"><a href="#描述-25" class="headerlink" title="描述"></a>描述</h6><p>append() 方法用于在列表末尾添加新的对象。</p><h6 id="语法-29"><a href="#语法-29" class="headerlink" title="语法"></a>语法</h6><p>append()方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.append(obj)</span><br></pre></td></tr></table></figure><h6 id="参数-29"><a href="#参数-29" class="headerlink" title="参数"></a>参数</h6><ul><li>obj – 添加到列表末尾的对象。</li></ul><h6 id="返回值-28"><a href="#返回值-28" class="headerlink" title="返回值"></a>返回值</h6><p>该方法无返回值，但是会修改原来的列表。</p><h6 id="实例-31"><a href="#实例-31" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = 2</span><br><span class="line">list=[]</span><br><span class="line">list.append(n)</span><br><span class="line">print(list)</span><br><span class="line">结果：[2]</span><br></pre></td></tr></table></figure><h5 id="Python-List-count-方法"><a href="#Python-List-count-方法" class="headerlink" title="Python List count()方法"></a>Python List count()方法</h5><h6 id="描述-26"><a href="#描述-26" class="headerlink" title="描述"></a>描述</h6><p>Python count() 方法用于统计字符串里某个字符或子字符串出现的次数。可选参数为在字符串搜索的开始与结束位置。</p><h6 id="语法-30"><a href="#语法-30" class="headerlink" title="语法"></a>语法</h6><p>count()方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.count(sub, start= 0,end=len(string))</span><br></pre></td></tr></table></figure><h6 id="参数-30"><a href="#参数-30" class="headerlink" title="参数"></a>参数</h6><ul><li>sub – 搜索的子字符串</li><li>start – 字符串开始搜索的位置。默认为第一个字符,第一个字符索引值为0。</li><li>end – 字符串中结束搜索的位置。字符中第一个字符的索引为 0。默认为字符串的最后一个位置。</li></ul><h6 id="返回值-29"><a href="#返回值-29" class="headerlink" title="返回值"></a>返回值</h6><p>该方法返回子字符串在字符串中出现的次数。</p><h6 id="实例-32"><a href="#实例-32" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str=&quot;hello world&quot;</span><br><span class="line">n = &quot;o&quot;</span><br><span class="line">print(str.count(n,2,5))</span><br><span class="line">结果：1</span><br></pre></td></tr></table></figure><h5 id="Python-List-extend-方法"><a href="#Python-List-extend-方法" class="headerlink" title="Python List extend()方法"></a>Python List extend()方法</h5><h6 id="描述-27"><a href="#描述-27" class="headerlink" title="描述"></a>描述</h6><p>extend() 函数用于在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）。</p><h6 id="语法-31"><a href="#语法-31" class="headerlink" title="语法"></a>语法</h6><p>extend()方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.extend(seq)</span><br></pre></td></tr></table></figure><h6 id="参数-31"><a href="#参数-31" class="headerlink" title="参数"></a>参数</h6><ul><li>seq – 元素列表。</li></ul><h6 id="返回值-30"><a href="#返回值-30" class="headerlink" title="返回值"></a>返回值</h6><p>该方法没有返回值，但会在已存在的列表中添加新的列表内容。</p><h6 id="实例-33"><a href="#实例-33" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var = [&#x27;刘德华&#x27;,&#x27;张学友&#x27;,&#x27;黎明&#x27;,&#x27;郭富城&#x27;]</span><br><span class="line">f4 = [&#x27;小沈阳&#x27;,&#x27;刘能&#x27;,&#x27;宋小宝&#x27;,&#x27;赵四&#x27;]</span><br><span class="line">var.extend(f4)</span><br><span class="line">print(var)</span><br><span class="line">#[&#x27;刘德华&#x27;, &#x27;张学友&#x27;, &#x27;黎明&#x27;, &#x27;郭富城&#x27;, &#x27;小沈阳&#x27;, &#x27;刘能&#x27;, &#x27;宋小宝&#x27;, &#x27;赵四&#x27;]</span><br><span class="line">#跟&#x27;+&#x27;号的作用差不多，而且extend()括号中放入的是容器，也就是列表</span><br></pre></td></tr></table></figure><h5 id="Python-List-index-方法"><a href="#Python-List-index-方法" class="headerlink" title="Python List index()方法"></a>Python List index()方法</h5><h6 id="描述-28"><a href="#描述-28" class="headerlink" title="描述"></a>描述</h6><p>Python index() 方法检测字符串中是否包含子字符串 str ，如果指定 beg（开始） 和 end（结束） 范围，则检查是否包含在指定范围内，该方法与 python find()方法一样，只不过如果str不在 string中会报一个异常。</p><h6 id="语法-32"><a href="#语法-32" class="headerlink" title="语法"></a>语法</h6><p>index()方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.index(str, beg=0, end=len(string))</span><br></pre></td></tr></table></figure><h6 id="参数-32"><a href="#参数-32" class="headerlink" title="参数"></a>参数</h6><ul><li>str – 指定检索的字符串</li><li>beg – 开始索引，默认为0。</li><li>end – 结束索引，默认为字符串的长度。</li></ul><h6 id="返回值-31"><a href="#返回值-31" class="headerlink" title="返回值"></a>返回值</h6><p>如果包含子字符串返回开始的索引值，否则抛出异常。</p><h6 id="实例-34"><a href="#实例-34" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vlist = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]</span><br><span class="line">res = vlist.index(&#x27;a&#x27;)</span><br><span class="line">print(res)</span><br><span class="line">#0</span><br><span class="line">#只找第一次发现的，后面的不管</span><br><span class="line">vlist = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]</span><br><span class="line">res = vlist.index(&#x27;a&#x27;,2,-1)</span><br><span class="line">print(res)</span><br><span class="line">#3</span><br><span class="line">#也可以指定查找范围</span><br></pre></td></tr></table></figure><h5 id="Python-List-insert-方法"><a href="#Python-List-insert-方法" class="headerlink" title="Python List insert()方法"></a>Python List insert()方法</h5><h6 id="描述-29"><a href="#描述-29" class="headerlink" title="描述"></a>描述</h6><p>insert() 函数用于将指定对象插入列表的指定位置。</p><h6 id="语法-33"><a href="#语法-33" class="headerlink" title="语法"></a>语法</h6><p>insert()方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.insert(index, obj)</span><br></pre></td></tr></table></figure><h6 id="参数-33"><a href="#参数-33" class="headerlink" title="参数"></a>参数</h6><ul><li>index – 对象 obj 需要插入的索引位置。</li><li>obj – 要插入列表中的对象。</li></ul><h6 id="返回值-32"><a href="#返回值-32" class="headerlink" title="返回值"></a>返回值</h6><p>该方法没有返回值，但会在列表指定位置插入对象。</p><h6 id="实例-35"><a href="#实例-35" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var = [&#x27;刘德华&#x27;,&#x27;张学友&#x27;,&#x27;黎明&#x27;,&#x27;郭富城&#x27;]</span><br><span class="line">f4 = [&#x27;小沈阳&#x27;,&#x27;刘能&#x27;,&#x27;宋小宝&#x27;,&#x27;赵四&#x27;]</span><br><span class="line">vlist = var + f4</span><br><span class="line">vlist.insert(-1,&#x27;张国荣&#x27;)#指定-1位置时会把原来-1位置的元素往后挤</span><br><span class="line">print(vlist)</span><br><span class="line">#[&#x27;刘德华&#x27;, &#x27;张学友&#x27;, &#x27;黎明&#x27;, &#x27;郭富城&#x27;, &#x27;小沈阳&#x27;, &#x27;刘能&#x27;, &#x27;宋小宝&#x27;, &#x27;张国荣&#x27;, &#x27;赵四&#x27;]</span><br><span class="line">@于是，你就知道了insert方法是可以出栈的</span><br><span class="line">var = [&#x27;刘德华&#x27;,&#x27;张学友&#x27;,&#x27;黎明&#x27;,&#x27;郭富城&#x27;]</span><br><span class="line">f4 = [&#x27;小沈阳&#x27;,&#x27;刘能&#x27;,&#x27;宋小宝&#x27;,&#x27;赵四&#x27;]</span><br><span class="line">vlist = var + f4</span><br><span class="line">vlist.insert(8,&#x27;张国荣&#x27;)</span><br><span class="line">print(vlist)</span><br><span class="line">#[&#x27;刘德华&#x27;, &#x27;张学友&#x27;, &#x27;黎明&#x27;, &#x27;郭富城&#x27;, &#x27;小沈阳&#x27;, &#x27;刘能&#x27;, &#x27;宋小宝&#x27;, &#x27;赵四&#x27;, &#x27;张国荣&#x27;]</span><br><span class="line">#有问题吗，没有问题。</span><br></pre></td></tr></table></figure><h5 id="Python-List-pop-方法"><a href="#Python-List-pop-方法" class="headerlink" title="Python List pop()方法"></a>Python List pop()方法</h5><h6 id="描述-30"><a href="#描述-30" class="headerlink" title="描述"></a>描述</h6><p>pop() 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。</p><h6 id="语法-34"><a href="#语法-34" class="headerlink" title="语法"></a>语法</h6><p>pop()方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.pop([index=-1])</span><br></pre></td></tr></table></figure><h6 id="参数-34"><a href="#参数-34" class="headerlink" title="参数"></a>参数</h6><ul><li>obj – 可选参数，要移除列表元素的索引值，不能超过列表总长度，默认为 index=-1，删除最后一个列表值。</li></ul><h6 id="返回值-33"><a href="#返回值-33" class="headerlink" title="返回值"></a>返回值</h6><p>该方法返回从列表中移除的元素对象。</p><h6 id="实例-36"><a href="#实例-36" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var = [&#x27;刘德华&#x27;,&#x27;张学友&#x27;,&#x27;黎明&#x27;,&#x27;郭富城&#x27;]</span><br><span class="line">f4 = [&#x27;小沈阳&#x27;,&#x27;刘能&#x27;,&#x27;宋小宝&#x27;,&#x27;赵四&#x27;]</span><br><span class="line">vlist = var + f4</span><br><span class="line">kik = vlist.pop()</span><br><span class="line">res = vlist.pop(5)</span><br><span class="line">print(kik)</span><br><span class="line">print(res)</span><br><span class="line">print(vlist)</span><br><span class="line">#赵四</span><br><span class="line">#刘能</span><br><span class="line">#[&#x27;刘德华&#x27;, &#x27;张学友&#x27;, &#x27;黎明&#x27;, &#x27;郭富城&#x27;, &#x27;小沈阳&#x27;, &#x27;宋小宝&#x27;]</span><br><span class="line">#被pop的元素会从列表中出栈（区别），所以非必要不要用</span><br></pre></td></tr></table></figure><h5 id="Python-List-remove-方法"><a href="#Python-List-remove-方法" class="headerlink" title="Python List remove()方法"></a>Python List remove()方法</h5><h6 id="描述-31"><a href="#描述-31" class="headerlink" title="描述"></a>描述</h6><p>remove() 函数用于移除列表中某个值的第一个匹配项。</p><h6 id="语法-35"><a href="#语法-35" class="headerlink" title="语法"></a>语法</h6><p>remove()方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.remove(obj)</span><br></pre></td></tr></table></figure><h6 id="参数-35"><a href="#参数-35" class="headerlink" title="参数"></a>参数</h6><ul><li>obj – 列表中要移除的对象。</li></ul><h6 id="返回值-34"><a href="#返回值-34" class="headerlink" title="返回值"></a>返回值</h6><p>该方法没有返回值但是会移除列表中的某个值的第一个匹配项。</p><h6 id="实例-37"><a href="#实例-37" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vlist = [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]</span><br><span class="line">vlist.remove(&#x27;a&#x27;)</span><br><span class="line">print(vlist)</span><br><span class="line">#[&#x27;b&#x27;, &#x27;c&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br><span class="line">#删除了，但是只删除一个，不能默认，如果没有指定的元素就报错</span><br></pre></td></tr></table></figure><h5 id="Python3-List-clear-方法"><a href="#Python3-List-clear-方法" class="headerlink" title="Python3 List clear()方法"></a>Python3 List clear()方法</h5><h6 id="描述-32"><a href="#描述-32" class="headerlink" title="描述"></a>描述</h6><p>clear() 函数用于清空列表，类似于 **del a[:]**。</p><h6 id="语法-36"><a href="#语法-36" class="headerlink" title="语法"></a>语法</h6><p>clear()方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.clear()</span><br></pre></td></tr></table></figure><h6 id="参数-36"><a href="#参数-36" class="headerlink" title="参数"></a>参数</h6><ul><li>无。</li></ul><h6 id="返回值-35"><a href="#返回值-35" class="headerlink" title="返回值"></a>返回值</h6><p>该方法没有返回值。</p><h6 id="实例-38"><a href="#实例-38" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var = [&#x27;刘德华&#x27;,&#x27;张学友&#x27;,&#x27;黎明&#x27;,&#x27;郭富城&#x27;]</span><br><span class="line">f4 = [&#x27;小沈阳&#x27;,&#x27;刘能&#x27;,&#x27;宋小宝&#x27;,&#x27;赵四&#x27;]</span><br><span class="line">var.clear()</span><br><span class="line">print(var)</span><br><span class="line">#[]</span><br><span class="line">#就是清空列表，相当于del list</span><br></pre></td></tr></table></figure><h5 id="Pyhton-List-reverse-方法"><a href="#Pyhton-List-reverse-方法" class="headerlink" title="Pyhton List reverse()方法"></a>Pyhton List reverse()方法</h5><h6 id="描述-33"><a href="#描述-33" class="headerlink" title="描述"></a>描述</h6><p>reverse() 函数用于反向列表中元素。</p><h6 id="语法-37"><a href="#语法-37" class="headerlink" title="语法"></a>语法</h6><p>reverse()方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.reverse()</span><br></pre></td></tr></table></figure><h6 id="参数-37"><a href="#参数-37" class="headerlink" title="参数"></a>参数</h6><ul><li>no</li></ul><h6 id="返回值-36"><a href="#返回值-36" class="headerlink" title="返回值"></a>返回值</h6><p>该方法没有返回值，但是会对列表的元素进行反向排序。</p><h6 id="实例-39"><a href="#实例-39" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var = [&#x27;刘德华&#x27;,&#x27;张学友&#x27;,&#x27;黎明&#x27;,&#x27;郭富城&#x27;]</span><br><span class="line">f4 = [&#x27;小沈阳&#x27;,&#x27;刘能&#x27;,&#x27;宋小宝&#x27;,&#x27;赵四&#x27;]</span><br><span class="line">var.extend(f4)</span><br><span class="line">var.reverse()</span><br><span class="line">print(var)</span><br><span class="line">#[&#x27;赵四&#x27;, &#x27;宋小宝&#x27;, &#x27;刘能&#x27;, &#x27;小沈阳&#x27;, &#x27;郭富城&#x27;, &#x27;黎明&#x27;, &#x27;张学友&#x27;, &#x27;刘德华&#x27;]</span><br></pre></td></tr></table></figure><h5 id="Pyhton-List-sort-方法"><a href="#Pyhton-List-sort-方法" class="headerlink" title="Pyhton List sort()方法"></a>Pyhton List sort()方法</h5><h6 id="描述-34"><a href="#描述-34" class="headerlink" title="描述"></a>描述</h6><p><strong>sort()</strong> 函数用于对原列表进行排序，如果指定参数，则使用比较函数指定的比较函数。</p><p>使用list.sort()方法来排序，此时list本身将被修改。通常此方法不如sorted()方便，但是如果你不需要保留原来的list，此方法将更有效。</p><p>list.sort()方法仅被定义在list中，相反地sorted()方法对所有的可迭代序列都有效。</p><h6 id="语法-38"><a href="#语法-38" class="headerlink" title="语法"></a>语法</h6><p>sort()方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.sort(cmp=None, key=None, reverse=False)</span><br></pre></td></tr></table></figure><h6 id="参数-38"><a href="#参数-38" class="headerlink" title="参数"></a>参数</h6><ul><li>cmp – 可选参数, 如果指定了该参数会使用该参数的方法进行排序（排序方法）。</li><li>key – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序（根据谁来排序）。</li><li>reverse – 排序规则，<strong>reverse = True</strong> 降序， <strong>reverse = False</strong> 升序（默认）。</li></ul><h6 id="返回值-37"><a href="#返回值-37" class="headerlink" title="返回值"></a>返回值</h6><p>该方法没有返回值，但是会对列表的对象进行排序。</p><h6 id="实例-40"><a href="#实例-40" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var = [2,4,2,3,4,4,5,43,78,9,2,2]</span><br><span class="line">var.sort()</span><br><span class="line">print(var)</span><br><span class="line">#[2, 2, 2, 2, 3, 4, 4, 4, 5, 9, 43, 78]</span><br><span class="line">a = &#123;4:1,\</span><br><span class="line">     5:2,\</span><br><span class="line">     3:3,\</span><br><span class="line">     2:6,\</span><br><span class="line">     1:8&#125;</span><br><span class="line">print(sorted(a.items()))</span><br><span class="line">#[(1, 8), (2, 6), (3, 3), (4, 1), (5, 2)]</span><br><span class="line">@key值的运用</span><br><span class="line">var = [[1,2],[2,3],[1,5],[2,2]]</span><br><span class="line">var.sort(key=lambda x:list(x)[1])#意思就是第二个</span><br><span class="line">print(var)</span><br><span class="line">#[[1, 2], [2, 2], [2, 3], [1, 5]]</span><br></pre></td></tr></table></figure><h5 id="sort与sorted的区别"><a href="#sort与sorted的区别" class="headerlink" title="sort与sorted的区别"></a>sort与sorted的区别</h5><h6 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h6><ul><li>参数都一样</li><li>功能一样</li></ul><h6 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h6><ul><li>适用范围不同，sort只能用于列表，而sorted能作用于字符串等其他有序容器</li><li>sort无返回值，改变源列表，sorted返回一个排序的列表</li></ul><h5 id="Python3-List-copy-方法"><a href="#Python3-List-copy-方法" class="headerlink" title="Python3 List copy()方法"></a>Python3 List copy()方法</h5><h6 id="描述-35"><a href="#描述-35" class="headerlink" title="描述"></a>描述</h6><p>copy() 函数用于复制列表，类似于 **a[:]**。</p><h6 id="语法-39"><a href="#语法-39" class="headerlink" title="语法"></a>语法</h6><p>copy()方法语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.copy()</span><br></pre></td></tr></table></figure><h6 id="参数-39"><a href="#参数-39" class="headerlink" title="参数"></a>参数</h6><ul><li>无。</li></ul><h6 id="返回值-38"><a href="#返回值-38" class="headerlink" title="返回值"></a>返回值</h6><p>返回复制后的新列表。</p><h6 id="实例-41"><a href="#实例-41" class="headerlink" title="实例"></a>实例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var = [1,2,3,4,5,6,7,8,9,10]</span><br><span class="line">res = var.copy()</span><br><span class="line">res.remove(10)</span><br><span class="line">print(res)</span><br><span class="line">print(var)</span><br><span class="line">#[1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line">#[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span><br><span class="line">#复制一份副本，副本和源文件不互相影响</span><br><span class="line">@当然，例外还是来了</span><br><span class="line">var = [1,2,3,[11,22,33]]</span><br><span class="line">res = var.copy()</span><br><span class="line">del res[3][2]</span><br><span class="line">print(res)</span><br><span class="line">print(var)</span><br><span class="line">#[1, 2, 3, [11, 22]]</span><br><span class="line">#[1, 2, 3, [11, 22]]</span><br><span class="line">#在删除多维列表中的数据时会影响到源列表</span><br></pre></td></tr></table></figure><h5 id="内置函数-1"><a href="#内置函数-1" class="headerlink" title="内置函数"></a>内置函数</h5><ul><li>max(list)：返回列表最大值</li><li>min(list)：返回列表最小值</li><li>list(sep:元组)：将元组转换为列表</li></ul><h4 id="浅拷贝于深拷贝"><a href="#浅拷贝于深拷贝" class="headerlink" title="浅拷贝于深拷贝"></a>浅拷贝于深拷贝</h4><ul><li>简单的拷贝就可以把列表复制一份</li><li>在拷贝一个多维列表时怎么办</li></ul><h6 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h6><ul><li>只能拷贝当前列表，不能拷贝多维列表</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@多维列表的操作问题</span><br><span class="line">var = [1,2,3,[11,22,33]]</span><br><span class="line">res = var.copy()</span><br><span class="line">del res[3][2]</span><br><span class="line">print(res)</span><br><span class="line">print(var)</span><br><span class="line">#[1, 2, 3, [11, 22]]</span><br><span class="line">#[1, 2, 3, [11, 22]]</span><br><span class="line">#在删除多维列表中的数据时会影响到源列表</span><br><span class="line">原因是什么？</span><br><span class="line">var = [1,2,3,[11,22,33]]</span><br><span class="line">res = var.copy()</span><br><span class="line">del res[3][2]</span><br><span class="line">print(res[2],id(res[2]))</span><br><span class="line">print(var[2],id(var[2]))</span><br><span class="line">#3 2007817218416</span><br><span class="line">#3 2007817218416</span><br><span class="line">#通过ID检测，发现列表中的多维列表是同一个元素</span><br><span class="line">#也就是说他们所用的地址是相同的，这就不难解释为什么会出现这种情况了</span><br></pre></td></tr></table></figure><h6 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h6><ul><li>就是不光拷贝当前列表，还拷贝了多为列表中的元素</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import copy</span><br><span class="line">var = [1,2,3,[11,22,33]]</span><br><span class="line">new = copy.deepcopy(var)</span><br><span class="line">del new[3][1]</span><br><span class="line">print(var,id(var[3]))</span><br><span class="line">print(new,id(new[3]))</span><br><span class="line">#[1, 2, 3, [11, 22, 33]] 1879437923520</span><br><span class="line">#[1, 2, 3, [11, 33]] 1879437922368</span><br><span class="line">#这下就没问题了，使用拷贝的时候注意实际情况</span><br></pre></td></tr></table></figure><h4 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h4><h5 id="实例-基本列表推导式"><a href="#实例-基本列表推导式" class="headerlink" title="实例-基本列表推导式"></a>实例-基本列表推导式</h5><h6 id="语法-40"><a href="#语法-40" class="headerlink" title="语法"></a>语法</h6><blockquote><p>变量 = [ 变量或变量的处理结果    for     变量     in     容器类型数据]</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@求0-9平方和</span><br><span class="line">#普通方法</span><br><span class="line">var = []</span><br><span class="line">for i in range(10):</span><br><span class="line">    var.append(i**2)</span><br><span class="line">print(var)</span><br><span class="line">#[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span><br><span class="line">#使用map和list完成</span><br><span class="line">var = list(map(lambda x:x**2,range(10)))</span><br><span class="line">print(var)</span><br><span class="line">#[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span><br><span class="line">#列表推导式</span><br><span class="line">var = [i**2 for i in range(10)]</span><br><span class="line">print(var)</span><br><span class="line">#[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span><br><span class="line">#和第一种是一样的，不要慌，多练一下就明白了</span><br><span class="line">@&#x27;1234&#x27;-&gt;[2,4,6,8]</span><br><span class="line">#列表推导式</span><br><span class="line">var = &#x27;1234&#x27;</span><br><span class="line">new = [int(i)*2 for i in var]</span><br><span class="line">print(new)</span><br><span class="line">#[2, 4, 6, 8]</span><br><span class="line">#使用位运算</span><br><span class="line">var = &#x27;1234&#x27;</span><br><span class="line">new = [int(i) &lt;&lt; 1 for i in var]#&lt;&lt; 二进制左移一位</span><br><span class="line">print(new)</span><br><span class="line">#[2, 4, 6, 8]</span><br></pre></td></tr></table></figure><h5 id="实例-加判断"><a href="#实例-加判断" class="headerlink" title="实例-加判断"></a>实例-加判断</h5><h6 id="语法-41"><a href="#语法-41" class="headerlink" title="语法"></a>语法</h6><blockquote><p>变量 = [变量或变量的处理结果    for    i     in    容器数据类型    田间表达式]</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@求0-9偶数</span><br><span class="line">#常规方法</span><br><span class="line">var = []</span><br><span class="line">for i in range(10):</span><br><span class="line">    if i % 2 == 0:</span><br><span class="line">        var.append(i)</span><br><span class="line">print(var)</span><br><span class="line">#[0, 2, 4, 6, 8]</span><br><span class="line">#列表推导式</span><br><span class="line">var = [i for i in range(10) if i % 2 == 0]</span><br><span class="line">print(var)</span><br><span class="line">#[0, 2, 4, 6, 8]</span><br></pre></td></tr></table></figure><blockquote><p>双列表</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list=[x + y for x in &quot;abc&quot; for y in &quot;123&quot;]</span><br><span class="line">print(list)</span><br><span class="line">#[&#x27;a1&#x27;, &#x27;a2&#x27;, &#x27;a3&#x27;, &#x27;b1&#x27;, &#x27;b2&#x27;, &#x27;b3&#x27;, &#x27;c1&#x27;, &#x27;c2&#x27;, &#x27;c3&#x27;]</span><br></pre></td></tr></table></figure><blockquote></blockquote>]]></content>
    
    
    <summary type="html">编程的小白之路</summary>
    
    
    
    <category term="编程" scheme="https://limuhuaxia.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="编程" scheme="https://limuhuaxia.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="python" scheme="https://limuhuaxia.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>HCIA安全实验</title>
    <link href="https://limuhuaxia.github.io/2021/12/09/HCIA%E5%AE%89%E5%85%A8%E5%AE%9E%E9%AA%8C/"/>
    <id>https://limuhuaxia.github.io/2021/12/09/HCIA%E5%AE%89%E5%85%A8%E5%AE%9E%E9%AA%8C/</id>
    <published>2021-12-09T06:15:55.000Z</published>
    <updated>2021-12-20T11:44:05.831Z</updated>
    
    <content type="html"><![CDATA[<h4 id="实验一（接入网络设备）"><a href="#实验一（接入网络设备）" class="headerlink" title="实验一（接入网络设备）"></a>实验一（接入网络设备）</h4><h6 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h6><p>​        掌握PC远程登录防火墙的技能</p><h6 id="实验top图"><a href="#实验top图" class="headerlink" title="实验top图"></a>实验top图</h6><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112121930344.png" alt="实验一top图" style="zoom: 50%;" /><h6 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h6><p>1.选择一张虚拟网卡（一般用VM的），并在云上配置如下图</p><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112121930502.png" alt="云的配置" style="zoom:50%;" /><p>2.登录防火墙，默认用户admin，默认密码Admin@123，登陆后必须改密码</p><p>3.进入到G0/0/0接口，这是管理口，连接时必须保证防火墙一端的接口是G0/0/0,修改IP地址与网卡在同一网段内，并放通HTTP服务。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int g0/0/0</span><br><span class="line">ip address 192.168.16.254 24</span><br><span class="line">service-manage all permit (习惯全部放通)</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112121930207.png" alt="web防火墙" style="zoom: 33%;" /><p>4.在浏览器输入G0/0/0接口的IP地址，点击‘高级’，点击‘继续访问’，输入账号和修改后的密码</p><img src="https://limuhuaxia.github.io//img/image-20211208211105314.png" alt="网络" style="zoom:33%;" /><p>然后你就进来了</p><h4 id="实验二（防火墙基础配置）"><a href="#实验二（防火墙基础配置）" class="headerlink" title="实验二（防火墙基础配置）"></a>实验二（防火墙基础配置）</h4><h6 id="实验目的-1"><a href="#实验目的-1" class="headerlink" title="实验目的"></a>实验目的</h6><ul><li>   掌握设备命名的方法</li><li>   掌握配置设备时间的方法</li><li>   掌握配置文件备份和恢复</li></ul><h6 id="实验TOP图"><a href="#实验TOP图" class="headerlink" title="实验TOP图"></a>实验TOP图</h6><p><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112121927242.png" alt="image-20211212185448585"></p><h5 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h5><h6 id="命名-时间设置"><a href="#命名-时间设置" class="headerlink" title="命名+时间设置"></a>命名+时间设置</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">system-view #进入视图界面</span><br><span class="line">sysname USG_A #更名为USG_A</span><br><span class="line">interface G0/0/0 #进入G0/0/0接口</span><br><span class="line">ip address 192.168.16.254 24 #配置地址</span><br><span class="line">service-manage all permit #放通所有服务</span><br><span class="line">&lt;USG_A&gt;clock datetime 0:0:0 2021-12-12 #设置日期</span><br><span class="line">&lt;USG_A&gt;clock timezone BJ add 08:00:00 #设置时间，最多不能超过14:00:00</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112121927244.png" alt="image-20211212185511961" style="zoom:80%;" /><blockquote><p>登录到web界面，可以看到时间已经设置好了</p></blockquote><h6 id="文件备份"><a href="#文件备份" class="headerlink" title="文件备份"></a>文件备份</h6><blockquote><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112121927245.png" alt="image-20211212185559746" style="zoom:67%;" /></blockquote><blockquote><p>选择系统，点击配置文件管理，再点击选择</p><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112121927246.png" alt="image-20211212185710055" style="zoom:67%;" /></blockquote><blockquote><p>下载在本地相当于文件备份，上传会浏览本地文件，等于文件更新</p><p>要注意的是，上传的文件必须为zip或jpg格式</p></blockquote><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112121927247.png" alt="image-20211212185730639" style="zoom:67%;" /><blockquote><p>看到配置配置下那个暗淡的灯泡没，点击后设置为下次启动配置文件，然后点击确定</p></blockquote><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112121927248.png" alt="image-20211212185752633" style="zoom:67%;" /><blockquote><p>系统—&gt;配置—&gt;系统重启，重启系统后就完成了本次实验的所有要求</p></blockquote><h4 id="实验三（网络基础配置）"><a href="#实验三（网络基础配置）" class="headerlink" title="实验三（网络基础配置）"></a>实验三（网络基础配置）</h4><h6 id="实现目的"><a href="#实现目的" class="headerlink" title="实现目的"></a>实现目的</h6><ul><li>理解路由的意义</li><li>掌握静态路由的配置方法</li></ul><h6 id="配置思路"><a href="#配置思路" class="headerlink" title="配置思路"></a>配置思路</h6><ul><li><p>配置IP地址</p></li><li><p>配置静态路由</p></li><li><p>测试PC互通性</p></li></ul><h6 id="实验TOP图-1"><a href="#实验TOP图-1" class="headerlink" title="实验TOP图"></a>实验TOP图</h6><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112121927249.png" alt="image-20211212185811986" style="zoom:67%;" /><h6 id="实验步骤-1"><a href="#实验步骤-1" class="headerlink" title="实验步骤"></a>实验步骤</h6><ol><li><p>配置IP地址</p><p>R1的配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;Huawei&gt;system-view </span><br><span class="line">Enter system view, return user view with Ctrl+Z.</span><br><span class="line">[Huawei]interface g0/0/0</span><br><span class="line">[Huawei-GigabitEthernet0/0/0]ip address 192.168.1.254 24</span><br><span class="line">Dec 12 2021 15:40:23-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[0]:The line protocol</span><br><span class="line"> IP on the interface GigabitEthernet0/0/0 has entered the UP state. </span><br><span class="line">[Huawei-GigabitEthernet0/0/0]int g0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]ip address 1.1.1.1 24</span><br><span class="line">Dec 12 2021 15:41:05-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[1]:The line protocol</span><br><span class="line"> IP on the interface GigabitEthernet0/0/1 has entered the UP state. </span><br></pre></td></tr></table></figure><p>R2的配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;Huawei&gt;system-view </span><br><span class="line">Enter system view, return user view with Ctrl+Z.</span><br><span class="line">[Huawei]interface g0/0/0</span><br><span class="line">[Huawei-GigabitEthernet0/0/0]ip address 1.1.1.2 24</span><br><span class="line">Dec 12 2021 15:46:22-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[0]:The line protocol</span><br><span class="line"> IP on the interface GigabitEthernet0/0/0 has entered the UP state. </span><br><span class="line">[Huawei-GigabitEthernet0/0/0]int g0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]ip address 192.168.2.254 24</span><br><span class="line">Dec 12 2021 15:46:45-08:00 Huawei %%01IFNET/4/LINK_STATE(l)[1]:The line protocol</span><br><span class="line"> IP on the interface GigabitEthernet0/0/1 has entered the UP state. </span><br></pre></td></tr></table></figure></li></ol><p>2.配置静态路由</p><p>R1的配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Huawei]ip route-static 192.168.2.0 24 1.1.1.2</span><br></pre></td></tr></table></figure><p>R2的配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Huawei]ip route-static 192.168.1.0 24 1.1.1.1</span><br></pre></td></tr></table></figure><p>3.测试PC互通性</p><p>PC1：</p><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112121927250.png" alt="image-20211212185831253" style="zoom:67%;" /><p>PC2：</p><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112121927251.png" alt="image-20211212185844562" style="zoom:67%;" /><blockquote><p>至此，实验三完成</p></blockquote><h4 id="实验四（防火墙安全策略实验）"><a href="#实验四（防火墙安全策略实验）" class="headerlink" title="实验四（防火墙安全策略实验）"></a>实验四（防火墙安全策略实验）</h4><h6 id="实验目的-2"><a href="#实验目的-2" class="headerlink" title="实验目的"></a>实验目的</h6><ul><li>理解安全策略原理</li><li>理解不同安全域之间的关系</li><li>掌握命令行和web方式配置安全策略</li></ul><h6 id="实验TOP图-2"><a href="#实验TOP图-2" class="headerlink" title="实验TOP图"></a>实验TOP图</h6><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112121927252.png" alt="image-20211212185901630" style="zoom:67%;" /><h6 id="配置思路-1"><a href="#配置思路-1" class="headerlink" title="配置思路"></a>配置思路</h6><ul><li>配置设备IP地址及其所属的安全域</li><li>配置域间安全策略</li></ul><h6 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h6><p>命令行配置：</p><blockquote><p>IP地址配置</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;USG6000V1&gt;system-view </span><br><span class="line">Enter system view, return user view with Ctrl+Z.</span><br><span class="line">[USG6000V1]int g1/0/0</span><br><span class="line">[USG6000V1-GigabitEthernet1/0/0]ip address 40.1.1.1 24</span><br><span class="line">Dec 12 2021 08:23:07 USG6000V1 %%01IFNET/4/LINK_STATE(l)[0]:The line protocol IP</span><br><span class="line"> on the interface GigabitEthernet1/0/0 has entered the UP state.</span><br><span class="line">Dec 12 2021 08:23:07 USG6000V1 %%01RM/4/ROUTERID_CHANGE(l)[1]:The router ID is 4</span><br><span class="line">0.1.1.1. (InstanceID=0)</span><br><span class="line">[USG6000V1-GigabitEthernet1/0/0]int g1/0/1</span><br><span class="line">[USG6000V1-GigabitEthernet1/0/1]ip address 10.1.1.1 24</span><br><span class="line">Dec 12 2021 08:25:20 USG6000V1 %%01IFNET/4/LINK_STATE(l)[2]:The line protocol IP</span><br><span class="line"> on the interface GigabitEthernet1/0/1 has entered the UP state.</span><br><span class="line">[USG6000V1-GigabitEthernet1/0/1]int g0/0/0</span><br><span class="line">[USG6000V1-GigabitEthernet0/0/0]ip address 192.168.16.254 24</span><br><span class="line">Dec 12 2021 08:26:05 USG6000V1 DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25</span><br><span class="line">.191.3.1 configurations have been changed. The current change number is 4, the c</span><br><span class="line">hange loop count is 0, and the maximum number of records is 4095.</span><br></pre></td></tr></table></figure><blockquote><p>配置trust与untrust区域的转发策略</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[USG6000V1]security-policy</span><br><span class="line">[USG6000V1-policy-security]rule name trust_untrust</span><br><span class="line">Dec 12 2021 08:30:25 USG6000V1 DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25</span><br><span class="line">.191.3.1 configurations have been changed. The current change number is 5, the c</span><br><span class="line">hange loop count is 0, and the maximum number of records is 4095.</span><br><span class="line">[USG6000V1-policy-security-rule-trust_untrust]source-zone trust </span><br><span class="line">Dec 12 2021 08:30:35 USG6000V1 DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25</span><br><span class="line">.191.3.1 configurations have been changed. The current change number is 6, the c</span><br><span class="line">hange loop count is 0, and the maximum number of records is 4095.</span><br><span class="line">[USG6000V1-policy-security-rule-trust_untrust]destination-zone untrust </span><br><span class="line">[USG6000V1-policy-security-rule-trust_untrust]action permit </span><br><span class="line">Dec 12 2021 08:30:55 USG6000V1 DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25</span><br><span class="line">.191.3.1 configurations have been changed. The current change number is 8, the c</span><br><span class="line">hange loop count is 0, and the maximum number of records is 4095.</span><br><span class="line">[USG6000V1-policy-security-rule-trust_untrust]quit</span><br></pre></td></tr></table></figure><blockquote><p>绑定接口区域，<del>并配置一条默认路由</del>,这里是交换机不同加默认路由</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[USG6000V1]firewall zone trust </span><br><span class="line">[USG6000V1-zone-trust]add interface GigabitEthernet 1/0/0</span><br><span class="line">Dec 12 2021 08:33:55 USG6000V1 DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25</span><br><span class="line">.191.3.1 configurations have been changed. The current change number is 9, the c</span><br><span class="line">hange loop count is 0, and the maximum number of records is 4095.</span><br><span class="line">[USG6000V1-zone-trust]quit</span><br><span class="line">[USG6000V1]firewall zone untrust </span><br><span class="line">[USG6000V1-zone-untrust]add interface GigabitEthernet 1/0/1</span><br><span class="line">Dec 12 2021 08:34:25 USG6000V1 DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25</span><br><span class="line">.191.3.1 configurations have been changed. The current change number is 10, the </span><br><span class="line">change loop count is 0, and the maximum number of records is 4095.</span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112121927253.png" alt="image-20211212185921641" style="zoom:67%;" /><p>web配置：</p><blockquote><p>接口IP地址及安全区域配置，点击接口名称即可配置，这里不做过多演示，网络&gt;&gt;接口</p></blockquote><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112121927254.png" alt="image-20211212185936172" style="zoom:67%;" /><blockquote><p>安全策略，策略&gt;&gt;安全策略&gt;&gt;新建安全策略；可以配置名字源目安全区域</p></blockquote><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112121927255.png" alt="image-20211212185949345" style="zoom:67%;" /><blockquote><p>至此，实验四完成</p></blockquote><h4 id="实验五（NAT-server-amp-源NAT实验）"><a href="#实验五（NAT-server-amp-源NAT实验）" class="headerlink" title="实验五（NAT server&amp;源NAT实验）"></a>实验五（NAT server&amp;源NAT实验）</h4><h5 id="实验目的-3"><a href="#实验目的-3" class="headerlink" title="实验目的"></a>实验目的</h5><ul><li>理解源NAT应用场景及原理</li><li>理解NAT server 应用场景及原理</li><li>掌握通过命令行和web方式配置防火墙NAT server&amp;源NAT命令</li></ul><h5 id="实验TOP图-3"><a href="#实验TOP图-3" class="headerlink" title="实验TOP图"></a>实验TOP图</h5><p><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112151920212.png"></p><h5 id="配置思路（源NAT）"><a href="#配置思路（源NAT）" class="headerlink" title="配置思路（源NAT）"></a>配置思路（源NAT）</h5><p>1.红区模拟外网，绿区蓝区为内网，通过源NAT转换实现内外网互通</p><p>2.配置基本的IP地址和所属安全域，并且放行对应的安全策略</p><p>3.创建NAT地址池</p><p>4.配置NAT策略</p><h6 id="配置步骤-CLI"><a href="#配置步骤-CLI" class="headerlink" title="配置步骤-CLI"></a>配置步骤-CLI</h6><blockquote><p>防火墙IP地址、默认路由配置</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;USG6000V1&gt;system-view </span><br><span class="line">[USG6000V1]int g1/0/0</span><br><span class="line">[USG6000V1-GigabitEthernet1/0/0]ip ad 192.168.1.254 24</span><br><span class="line">[USG6000V1-GigabitEthernet0/0/0]int g1/0/1</span><br><span class="line">[USG6000V1-GigabitEthernet1/0/1]ip ad 2.2.2.1 24</span><br><span class="line">[USG6000V1-GigabitEthernet1/0/1]int g0/0/0</span><br><span class="line">[USG6000V1-GigabitEthernet0/0/0]ip ad 192.168.16.254 24</span><br><span class="line">[USG6000V1-GigabitEthernet0/0/0]service-manage https permit</span><br><span class="line">[USG6000V1-GigabitEthernet0/0/0]q</span><br><span class="line">[USG6000V1]ip route-static 0.0.0.0 0 2.2.2.2</span><br></pre></td></tr></table></figure><blockquote><p>路由器IP地址、默认路由配置</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Huawei&gt;system-view </span><br><span class="line">Enter system view, return user view with Ctrl+Z.</span><br><span class="line">[Huawei]int g0/0/1</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]ip ad 192.168.3.254 24</span><br><span class="line">[Huawei-GigabitEthernet0/0/1]int g0/0/0</span><br><span class="line">[Huawei-GigabitEthernet0/0/0]ip ad 2.2.2.2 24</span><br><span class="line">[Huawei-GigabitEthernet0/0/0]q</span><br><span class="line">[Huawei]ip route-static 0.0.0.0 0 2.2.2.1</span><br></pre></td></tr></table></figure><blockquote><p>区域和安全策略（防火墙一定要给接口加区域，不然无法转发路由）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[USG6000V1]firewall zone trust </span><br><span class="line">[USG6000V1-zone-trust]add interface GigabitEthernet 1/0/0</span><br><span class="line">[USG6000V1-zone-trust]q</span><br><span class="line">[USG6000V1]firewall zone untrust</span><br><span class="line">[USG6000V1-zone-untrust]add interface GigabitEthernet 1/0/1</span><br><span class="line">[USG6000V1-zone-untrust]q</span><br><span class="line">[USG6000V1]security-policy</span><br><span class="line">[USG6000V1-policy-security]rule name trust_untrust</span><br><span class="line">[USG6000V1-policy-security-rule-trust_untrust]source-zone</span><br><span class="line">[USG6000V1-policy-security-rule-trust_untrust]source-zone trust </span><br><span class="line">[USG6000V1-policy-security-rule-trust_untrust]destination-zone untrust </span><br><span class="line">[USG6000V1-policy-security-rule-trust_untrust]action permit </span><br><span class="line">[USG6000V1-policy-security-rule-trust_untrust]quit</span><br></pre></td></tr></table></figure><blockquote><p>地址池和NAT策略</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[USG6000V1]nat address-group natpool</span><br><span class="line">[USG6000V1-address-group-natpool]section 2.2.2.3 2.2.2.6</span><br><span class="line">[USG6000V1]nat-policy</span><br><span class="line">[USG6000V1-policy-nat]rule name source_nat</span><br><span class="line">[USG6000V1-policy-nat-rule-source_nat]source-zone trust </span><br><span class="line">[USG6000V1-policy-nat-rule-source_nat]destination-zone untrust                 </span><br><span class="line">[USG6000V1-policy-nat-rule-source_nat]action source-nat address-group natpool</span><br></pre></td></tr></table></figure><blockquote><p>结果图</p></blockquote><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112151958346.png" alt="image-20211215195817259" style="zoom: 67%;" /><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112152000935.png" alt="image-20211215200054850" style="zoom:67%;" /><blockquote><p>可以看到流量的源IP地址已经换成地址池中的地址了</p></blockquote><h6 id="配置步骤-web"><a href="#配置步骤-web" class="headerlink" title="配置步骤-web"></a>配置步骤-web</h6><blockquote><p>看什么看，没有</p></blockquote><h5 id="配置思路（NATserver）"><a href="#配置思路（NATserver）" class="headerlink" title="配置思路（NATserver）"></a>配置思路（NATserver）</h5><ul><li>配置NATserver（安全策略）</li><li>配置NAT地址池</li><li>配置NAT策略</li></ul><h6 id="配置步骤-CLI-1"><a href="#配置步骤-CLI-1" class="headerlink" title="配置步骤-CLI"></a>配置步骤-CLI</h6><blockquote><p>安全策略</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[USG6000V1]security-policy</span><br><span class="line">[USG6000V1-policy-security]rule name ser_nat</span><br><span class="line">[USG6000V1-policy-security-rule-ser_nat]source-zone untrust </span><br><span class="line">[USG6000V1-policy-security-rule-ser_nat]destination-zone trust </span><br><span class="line">[USG6000V1-policy-security-rule-ser_nat]action permit </span><br></pre></td></tr></table></figure><blockquote><p>配置NAT地址池</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[USG6000V1]nat address-group serpool</span><br><span class="line">[USG6000V1-address-group-serpool]s</span><br><span class="line">[USG6000V1-address-group-serpool]section </span><br><span class="line">Dec 15 2021 12:22:17 USG6000V1 DS/4/DATASYNC_CFGCHANGE:OID 1.3.6.1.4.1.2011.5.25</span><br><span class="line">.191.3.1 configurations have been changed. The current change number is 22, the </span><br><span class="line">change loop count is 0, and the maximum number of records is 4095.</span><br><span class="line">[USG6000V1-address-group-serpool]section 192.168.1.20 192.168.1.25</span><br></pre></td></tr></table></figure><blockquote><p>配置NAT策略</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[USG6000V1]nat-policy</span><br><span class="line">[USG6000V1-policy-nat]rule name ser_nat</span><br><span class="line">[USG6000V1-policy-nat-rule-ser_nat]source-zone untrust </span><br><span class="line">[USG6000V1-policy-nat-rule-ser_nat]destination-zone trust </span><br><span class="line">[USG6000V1-policy-nat-rule-ser_nat]action source-nat address-group serpool</span><br></pre></td></tr></table></figure><blockquote><p>结果图,</p></blockquote><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112152030973.png" alt="image-20211215203038893" style="zoom:67%;" /><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112152041045.png" alt="image-20211215204132968" style="zoom:67%;" /><h4 id="实验六（双机热备）"><a href="#实验六（双机热备）" class="headerlink" title="实验六（双机热备）"></a>实验六（双机热备）</h4><h5 id="实现介绍"><a href="#实现介绍" class="headerlink" title="实现介绍"></a>实现介绍</h5><h6 id="关于实验"><a href="#关于实验" class="headerlink" title="关于实验"></a>关于实验</h6><ul><li>本实验是为了测试在防火墙宕机的情况下备份防火墙能够快速接替，保持网络的连通性。</li></ul><h6 id="实验目的-4"><a href="#实验目的-4" class="headerlink" title="实验目的"></a>实验目的</h6><ul><li>理解双机热备基本原理</li><li>理解VGMP和HRP协议</li><li>掌握命令行和web方式配置防火墙双机热备</li></ul><h6 id="实验TOP图-4"><a href="#实验TOP图-4" class="headerlink" title="实验TOP图"></a>实验TOP图</h6><p><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112191604973.png" alt="image-20211219160457866"></p><h6 id="配置思路-2"><a href="#配置思路-2" class="headerlink" title="配置思路"></a>配置思路</h6><p>１.配置基础的IP地址</p><p>２.接口加区域，放通安全策略并配置路由</p><p>３.配置VRRP和HRP，自动备份</p><h5 id="配置步骤-1"><a href="#配置步骤-1" class="headerlink" title="配置步骤"></a>配置步骤</h5><h6 id="基本IP地址配置"><a href="#基本IP地址配置" class="headerlink" title="基本IP地址配置"></a>基本IP地址配置</h6><blockquote><p>FW1的IP配置</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;USG6000V1&gt;system view</span><br><span class="line">[USG6000V1]int g1/0/1</span><br><span class="line">[USG6000V1-GigabitEthernet1/0/1]ip addr 100.1.1.1 24</span><br><span class="line">[USG6000V1-GigabitEthernet1/0/1]int g1/0/2</span><br><span class="line">[USG6000V1-GigabitEthernet1/0/2]ip addr 192.168.2.2 24</span><br><span class="line">[USG6000V1-GigabitEthernet1/0/2]int g1/0/0</span><br><span class="line">[USG6000V1-GigabitEthernet1/0/0]ip addr 10.1.1.1 24</span><br></pre></td></tr></table></figure><blockquote><p>FW2的IP配置</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;USG6000V1&gt;system view</span><br><span class="line">[USG6000V1]int g1/0/1</span><br><span class="line">[USG6000V1-GigabitEthernet1/0/1]ip addr 100.1.1.2 24</span><br><span class="line">[USG6000V1-GigabitEthernet1/0/1]int g1/0/2</span><br><span class="line">[USG6000V1-GigabitEthernet1/0/2]ip addr 192.168.2.3 24</span><br><span class="line">[USG6000V1-GigabitEthernet1/0/2]int g1/0/0</span><br><span class="line">[USG6000V1-GigabitEthernet1/0/0]ip addr 10.1.1.2 24</span><br></pre></td></tr></table></figure><blockquote><p>路由器R1配置   #这里使用路由时是因为路由的下一跳不能为PC机，而路由器即可当下一跳又能模拟PC访问</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Huawei&gt;system-view </span><br><span class="line">[Huawei]int g0/0/0</span><br><span class="line">[Huawei-GigabitEthernet0/0/0]ip addr 192.168.2.1 24 </span><br><span class="line">[Huawei-GigabitEthernet0/0/0]int loo0</span><br><span class="line">[Huawei-LoopBack0]ip addr 114.114.114.114 32</span><br></pre></td></tr></table></figure><h6 id="区域、安全策略和路由"><a href="#区域、安全策略和路由" class="headerlink" title="区域、安全策略和路由"></a>区域、安全策略和路由</h6><blockquote><p>FW1区域、策略、路由</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[USG6000V1]firewall zone trust </span><br><span class="line">[USG6000V1-zone-trust]add interface GigabitEthernet 1/0/1</span><br><span class="line">[USG6000V1-zone-trust]q</span><br><span class="line">[USG6000V1]firewall zone  untrust </span><br><span class="line">[USG6000V1-zone-untrust]add interface  GigabitEthernet 1/0/2</span><br><span class="line">[USG6000V1-zone-untrust]q</span><br><span class="line">[USG6000V1]firewall zone dmz </span><br><span class="line">[USG6000V1-zone-dmz]add interface  GigabitEthernet 1/0/0</span><br><span class="line"></span><br><span class="line">[USG6000V1]security-policy#trust访问untrust</span><br><span class="line">[USG6000V1-policy-security]rule name trust_untrust</span><br><span class="line">[USG6000V1-policy-security-rule-trust_untrust]source-zone trust </span><br><span class="line">[USG6000V1-policy-security-rule-trust_untrust]destination-zone untrust </span><br><span class="line">[USG6000V1-policy-security-rule-trust_untrust]action permit </span><br><span class="line">[USG6000V1]security-policy  #HRP协议心跳规则</span><br><span class="line">[USG6000V1-policy-security]rule name heart</span><br><span class="line">[USG6000V1-policy-security-rule-heart]source-zone</span><br><span class="line">[USG6000V1-policy-security-rule-heart]source-zone local </span><br><span class="line">[USG6000V1-policy-security-rule-heart]destination-zone dmz </span><br><span class="line">[USG6000V1-policy-security-rule-heart]action permit </span><br><span class="line"></span><br><span class="line">[USG6000V1]ip route-static 0.0.0.0 0 192.168.2.1</span><br></pre></td></tr></table></figure><blockquote><p>FW2区域、策略、路由</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[USG6000V1]firewall zone trust </span><br><span class="line">[USG6000V1-zone-trust]add interface GigabitEthernet 1/0/1</span><br><span class="line">[USG6000V1-zone-trust]q</span><br><span class="line">[USG6000V1]firewall zone untrust </span><br><span class="line">[USG6000V1-zone-untrust]add interface GigabitEthernet 1/0/2</span><br><span class="line">[USG6000V1-zone-untrust]q</span><br><span class="line">[USG6000V1]firewall zone dmz </span><br><span class="line">[USG6000V1-zone-dmz]add interface GigabitEthernet 1/0/0</span><br><span class="line"></span><br><span class="line">[USG6000V1]security-policy</span><br><span class="line">[USG6000V1-policy-security]rule name trust_untrust</span><br><span class="line">[USG6000V1-policy-security-rule-trust_untrust]source-zone trust </span><br><span class="line">[USG6000V1-policy-security-rule-trust_untrust]destination-zone untrust </span><br><span class="line">[USG6000V1-policy-security-rule-trust_untrust]action permit </span><br><span class="line">[USG6000V1]security-policy </span><br><span class="line">[USG6000V1-policy-security]rule name heart</span><br><span class="line">[USG6000V1-policy-security-rule-heart]source-zone local </span><br><span class="line">[USG6000V1-policy-security-rule-heart]destination-zone dmz </span><br><span class="line">[USG6000V1-policy-security-rule-heart]action permit </span><br><span class="line"></span><br><span class="line">[USG6000V1]ip route-static 0.0.0.0 0 192.168.2.1 </span><br></pre></td></tr></table></figure><h6 id="VRRP、HRP、自动备份"><a href="#VRRP、HRP、自动备份" class="headerlink" title="VRRP、HRP、自动备份"></a>VRRP、HRP、自动备份</h6><blockquote><p>FW1　VRRP、HRP、备份</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[USG6000V1]int g1/0/1</span><br><span class="line">[USG6000V1-GigabitEthernet1/0/1]vrrp vrid 1 virtual-ip 100.1.1.99 active </span><br><span class="line">#vrid: 每一组VRRP的ID　virtual-ip: 虚拟IP　用于备份互通　active:　主</span><br><span class="line">[USG6000V1]int g1/0/2</span><br><span class="line">[USG6000V1-GigabitEthernet1/0/2]vrrp vrid 2 virtual-ip 192.168.2.99 active</span><br><span class="line"></span><br><span class="line">[USG6000V1]sysname FW1</span><br><span class="line">[FW1]hrp enable　＃开启HRP心跳功能</span><br><span class="line">HRP_S[FW1]hrp auto-sync　＃开启自动备份</span><br><span class="line">HRP_S[FW1]dis hrp state　＃查看HRP状态</span><br><span class="line">2021-12-19 09:35:44.220 </span><br><span class="line"> Role: standby, peer: unknown</span><br><span class="line"> Running priority: 45000, peer: unknown</span><br><span class="line"> Backup channel usage: 0.00%</span><br><span class="line"> Stable time: 0 days, 0 hours, 0 minutes</span><br><span class="line"> Last state change information: 2021-12-19 9:35:18 HRP core state changed, old_s</span><br><span class="line">tate = initial, new_state = abnormal(standby), local_priority = 45000, peer_prio</span><br><span class="line">rity = unknown.</span><br><span class="line">HRP_S[FW1]dis hrp int</span><br><span class="line">2021-12-19 09:39:36.630 </span><br><span class="line"> Info: There is no HRP interface.</span><br><span class="line"> </span><br><span class="line"> HRP_S[FW1]hrp interface g1/0/1 remote 10.1.1.2　＃映射心跳接口，IP为对端IP地址</span><br><span class="line"> Info: It is suggested to configure encryption key for HRP backup channels.</span><br></pre></td></tr></table></figure><blockquote><p>FW2 VRRP、HRP、自动备份</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[FW2]int g1/0/1</span><br><span class="line">[FW2-GigabitEthernet1/0/1]vrrp vrid 1 virtual-ip 100.1.1.99 standby </span><br><span class="line">＃standby: 备</span><br><span class="line">[FW2-GigabitEthernet1/0/1]int g1/0/2</span><br><span class="line">[FW2-GigabitEthernet1/0/2]vrrp vrid 2 virtual-ip 192.168.2.99 standby</span><br><span class="line"></span><br><span class="line">[USG6000V1]sysname FW2</span><br><span class="line">[FW2]hrp enable</span><br><span class="line">HRP_S[FW2]hrp auto-sync</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HRP_S[FW2]hrp int g1/0/0 remote 10.1.1.1</span><br><span class="line">HRP_S[FW2]dis hrp state</span><br><span class="line">2021-12-19 10:15:06.950 </span><br><span class="line"> Role: standby, peer: active</span><br><span class="line"> Running priority: 45000, peer: 45000</span><br><span class="line"> Backup channel usage: 0.00%</span><br><span class="line"> Stable time: 0 days, 0 hours, 0 minutes</span><br><span class="line"> Last state change information: 2021-12-19 10:14:34 HRP link changes to up.</span><br><span class="line">HRP_S[FW2]dis hrp int</span><br><span class="line">2021-12-19 10:15:40.550 </span><br><span class="line">             GigabitEthernet1/0/0 : running</span><br></pre></td></tr></table></figure><blockquote><p>我发现路由并不能通，上网查询后才知道ｅｎｓｐ有ｂｕｇ</p><p>于是，我改了下top图，并使用ｏｓｐｆ路由</p></blockquote><h6 id="TOP图修改"><a href="#TOP图修改" class="headerlink" title="TOP图修改"></a>TOP图修改</h6><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112192021861.png" alt="image-20211219202130725" style="zoom:67%;" /><blockquote><p>OSPF路由配置，配置vrrp后只需配置一遍即可</p></blockquote><blockquote><p>FW1的配置</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NETWORK 100.1.1.0 0.0.0.255</span><br><span class="line">NETWORK 192.168.2.0 0.0.0.255</span><br></pre></td></tr></table></figure><blockquote><p>R1的配置</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">network 192.168.2.0 0.0.0.255</span><br><span class="line">network 192.168.1.0 0.0.0.255</span><br></pre></td></tr></table></figure><h6 id="结果图如下："><a href="#结果图如下：" class="headerlink" title="结果图如下："></a>结果图如下：</h6><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112192033430.png" alt="image-20211219203305290" style="zoom:67%;" /><blockquote><p>可以看到在关闭上面防火墙的情况下网络依靠FW２继续运行</p></blockquote><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112192053461.png" alt="image-20211219205307344" style="zoom:67%;" /><blockquote><p>本次实验完成</p></blockquote><h4 id="实验七（防火墙用户管理）"><a href="#实验七（防火墙用户管理）" class="headerlink" title="实验七（防火墙用户管理）"></a>实验七（防火墙用户管理）</h4><h5 id="实验介绍"><a href="#实验介绍" class="headerlink" title="实验介绍"></a>实验介绍</h5><h6 id="关于实验-1"><a href="#关于实验-1" class="headerlink" title="关于实验"></a>关于实验</h6><ul><li>本实验在网络出口位置设置防火墙，对上网用户进行身份认证</li></ul><h6 id="实验目的-5"><a href="#实验目的-5" class="headerlink" title="实验目的"></a>实验目的</h6><ul><li>理解用户管理的基本原理</li><li>掌握免用户认证的配置方式</li><li>掌握密码认证用户的配置方式</li></ul><h6 id="实验TOP图-5"><a href="#实验TOP图-5" class="headerlink" title="实验TOP图"></a>实验TOP图</h6><p><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112201625205.png" alt="image-20211220162519134"></p><h6 id="配置思路-3"><a href="#配置思路-3" class="headerlink" title="配置思路"></a>配置思路</h6><ul><li>配置对应的IP地址及安全区域</li><li>创建用户组和对应的用户组策略</li></ul><blockquote><p>设置web地址</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;USG6000V1&gt;system view</span><br><span class="line">[USG6000V1]int g0/0/0</span><br><span class="line">[USG6000V1-GigabitEthernet0/0/0]ip addr 192.168.16.254 24</span><br><span class="line">[USG6000V1-GigabitEthernet0/0/0]service-manage https permit </span><br></pre></td></tr></table></figure><blockquote><p>设置防火墙IP和安全区域</p></blockquote><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112201734145.png" alt="image-20211220173437995" style="zoom:67%;" /><blockquote><p>对象—default—新建—新建用户组—Test</p></blockquote><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112201735954.png" alt="image-20211220173534807" style="zoom:67%;" /><blockquote><p>对象—用户—认证策略—新建—Guest</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112201749512.png" alt="image-20211220174903374"></p><blockquote><p>对象—default—新建—新建用户组—normal</p></blockquote><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112201737380.png" alt="image-20211220173717237" style="zoom:67%;" /><blockquote><p>认证策略—新建—Normal</p></blockquote><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112201737284.png" alt="image-20211220173747137" style="zoom:67%;" /><blockquote><p>策略—安全策略—新建—Test</p></blockquote><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112201814475.png" alt="image-20211220181434343" style="zoom:67%;" /><blockquote><p>策略—安全策略—新建—Normal</p></blockquote><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112201815937.png" alt="image-20211220181536808" style="zoom:67%;" /><blockquote><p>策略—安全策略—名称：anquan—源目区域：trust+local —服务—新建—名称：TCP  目的端口：8887</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112201822652.png" alt="image-20211220182225506"></p><h4 id="实验八（L2TP）"><a href="#实验八（L2TP）" class="headerlink" title="实验八（L2TP）"></a>实验八（L2TP）</h4><h6 id="实验TOP图-6"><a href="#实验TOP图-6" class="headerlink" title="实验TOP图"></a>实验TOP图</h6><img src="https://cdn.jsdelivr.net/gh/limuhuaxia/picgo/img/202112201904892.png" alt="image-20211220190457797" style="zoom:67%;" /><h6 id="实验步骤-2"><a href="#实验步骤-2" class="headerlink" title="实验步骤"></a>实验步骤</h6><blockquote><p>FW1配置IP地址</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">安全实验笔记</summary>
    
    
    
    <category term="安全" scheme="https://limuhuaxia.github.io/categories/%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="安全" scheme="https://limuhuaxia.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
    <category term="实验" scheme="https://limuhuaxia.github.io/tags/%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>Typora</title>
    <link href="https://limuhuaxia.github.io/2021/12/06/Typora/"/>
    <id>https://limuhuaxia.github.io/2021/12/06/Typora/</id>
    <published>2021-12-06T07:10:22.000Z</published>
    <updated>2021-12-12T07:10:52.844Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Typora的用法"><a href="#Typora的用法" class="headerlink" title="Typora的用法"></a>Typora的用法</h2><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>​    格式：#+空格+标题（输入几个#号就代表几级标题，最小6级标题）</p><p>​    快捷键：ctrl + 数字</p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><h4 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h4><p>删除线</p><p>语法：~~ (波浪线)文字~~（波浪线）</p><p>快捷键：Alt+shift+5</p><p><del>删除线</del></p><h4 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h4><p>语法：* 文字*    或  <em>文字</em></p><p>快捷键：ctrl + i</p><h4 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h4><p>语法:** 文字** __ 文字__</p><p>快捷键：ctrl + 文字</p><h4 id="斜体-加粗"><a href="#斜体-加粗" class="headerlink" title="斜体+加粗"></a>斜体+加粗</h4><p>语法:***   文字    * * *      ___ 文字 ___（没有空格，这里为了区分）</p><p>快捷键:无</p><h4 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h4><p>语法：<u> 文字 </u></p><p>快捷键：ctrl + u</p><h4 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h4><p>水：H<del>2</del>0</p><p>双氧水：H<del>2</del>0~2</p><h4 id="上标"><a href="#上标" class="headerlink" title="上标"></a>上标</h4><p>面积：m^2^</p><p>体积：m^3^</p><h4 id="表情"><a href="#表情" class="headerlink" title="表情"></a>表情</h4><p>常用的表情</p><p>😄😆😵😭😰😅😢😤 😍😎😩👍👎💯👏🔔🎁❓💣 ❤️☕️🌀 🙇💋🙏💦 💩 ❗️ 💢</p><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><p>可以在—分割线加入：设置表格对齐方式<br>“:——–“表示左对齐，”:———:“表示居中对齐，”———-:”表示右对齐</p><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><blockquote><p>这是一个引用（能看清多了个啥吗？）</p></blockquote><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>*一</p><p>-二</p><p>+三种都是无序列表</p><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>1.数字加.是有序列表</p><p>2.数字顺序不决定列表的顺序</p><p>3.推荐 1 2 3 4的顺序</p><p>4.没啦</p><h4 id="快捷键大全"><a href="#快捷键大全" class="headerlink" title="快捷键大全"></a>快捷键大全</h4><p>无序列表：- + 空格<br>有序列表：1. + 空格<br>引用：&gt; + 空格<br>标题：ctrl + 数字<br>表格：ctrl + t<br>生成目录：[TOC] + 回车<br>选中一整行：ctrl + l<br>选中单词：ctrl + d<br>选中相同格式的文字：ctrl + e<br>跳转到文章开头：ctrl + home<br>跳转到文章结尾：ctrl + end<br>搜索：ctrl + f<br>替换：ctrl + h<br>加粗：ctrl + b<br>倾斜：ctrl + i<br>下划线：ctrl + u<br>删除线：alt + shift + 5<br>插入图片：直接拖动到指定位置即可或者ctrl + shift + i<br>插入链接：ctrl + k</p>]]></content>
    
    
    <summary type="html">博客的基本操作</summary>
    
    
    
    <category term="Makedown" scheme="https://limuhuaxia.github.io/categories/Makedown/"/>
    
    
    <category term="makedown" scheme="https://limuhuaxia.github.io/tags/makedown/"/>
    
    <category term="学习" scheme="https://limuhuaxia.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
